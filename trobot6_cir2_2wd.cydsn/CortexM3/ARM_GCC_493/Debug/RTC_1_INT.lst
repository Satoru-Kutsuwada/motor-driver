ARM GAS  C:\Users\nosak\AppData\Local\Temp\cc03czBb.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"RTC_1_INT.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.RTC_1_EveryHourHandler,"ax",%progbits
  19              		.align	2
  20              		.thumb
  21              		.thumb_func
  22              		.type	RTC_1_EveryHourHandler, %function
  23              	RTC_1_EveryHourHandler:
  24              	.LFB2:
  25              		.file 1 ".\\Generated_Source\\PSoC5\\RTC_1_INT.c"
   1:.\Generated_Source\PSoC5/RTC_1_INT.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC5/RTC_1_INT.c **** * File Name: RTC_1_INT.c
   3:.\Generated_Source\PSoC5/RTC_1_INT.c **** * Version 2.0
   4:.\Generated_Source\PSoC5/RTC_1_INT.c **** *
   5:.\Generated_Source\PSoC5/RTC_1_INT.c **** * Description:
   6:.\Generated_Source\PSoC5/RTC_1_INT.c **** *  This file contains the Interrupt Service Routine (ISR) for the RTC component.
   7:.\Generated_Source\PSoC5/RTC_1_INT.c **** *  This interrupt routine has entry pointes to overflow on time or date.
   8:.\Generated_Source\PSoC5/RTC_1_INT.c **** *
   9:.\Generated_Source\PSoC5/RTC_1_INT.c **** ********************************************************************************
  10:.\Generated_Source\PSoC5/RTC_1_INT.c **** * Copyright 2008-2013, Cypress Semiconductor Corporation.  All rights reserved.
  11:.\Generated_Source\PSoC5/RTC_1_INT.c **** * You may use this file only in accordance with the license, terms, conditions,
  12:.\Generated_Source\PSoC5/RTC_1_INT.c **** * disclaimers, and limitations in the end user license agreement accompanying
  13:.\Generated_Source\PSoC5/RTC_1_INT.c **** * the software package with which this file was provided.
  14:.\Generated_Source\PSoC5/RTC_1_INT.c **** *******************************************************************************/
  15:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
  16:.\Generated_Source\PSoC5/RTC_1_INT.c **** #include "RTC_1.h"
  17:.\Generated_Source\PSoC5/RTC_1_INT.c **** #include "CyLib.h"
  18:.\Generated_Source\PSoC5/RTC_1_INT.c **** #include "cyapicallbacks.h"
  19:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
  20:.\Generated_Source\PSoC5/RTC_1_INT.c **** /* Function Prototypes */
  21:.\Generated_Source\PSoC5/RTC_1_INT.c **** static void RTC_1_EverySecondHandler(void);
  22:.\Generated_Source\PSoC5/RTC_1_INT.c **** static void RTC_1_EveryMinuteHandler(void);
  23:.\Generated_Source\PSoC5/RTC_1_INT.c **** static void RTC_1_EveryHourHandler(void);
  24:.\Generated_Source\PSoC5/RTC_1_INT.c **** static void RTC_1_EveryDayHandler(void);
  25:.\Generated_Source\PSoC5/RTC_1_INT.c **** static void RTC_1_EveryWeekHandler(void);
  26:.\Generated_Source\PSoC5/RTC_1_INT.c **** static void RTC_1_EveryMonthHandler(void);
  27:.\Generated_Source\PSoC5/RTC_1_INT.c **** static void RTC_1_EveryYearHandler(void);
  28:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
  29:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
  30:.\Generated_Source\PSoC5/RTC_1_INT.c **** /*******************************************************************************
  31:.\Generated_Source\PSoC5/RTC_1_INT.c **** *  Place your includes, defines and code here
  32:.\Generated_Source\PSoC5/RTC_1_INT.c **** *******************************************************************************/
ARM GAS  C:\Users\nosak\AppData\Local\Temp\cc03czBb.s 			page 2


  33:.\Generated_Source\PSoC5/RTC_1_INT.c **** /* `#START RTC_ISR_DEFINITION` */
  34:.\Generated_Source\PSoC5/RTC_1_INT.c **** extern void MyRTC_1_EverySecondHandler(void);
  35:.\Generated_Source\PSoC5/RTC_1_INT.c **** extern void MyRTC_1_EveryMinuteHandler(void);
  36:.\Generated_Source\PSoC5/RTC_1_INT.c **** extern void MyRTC_1_EveryHourHandler(void);
  37:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
  38:.\Generated_Source\PSoC5/RTC_1_INT.c **** /* `#END` */
  39:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
  40:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
  41:.\Generated_Source\PSoC5/RTC_1_INT.c **** /*******************************************************************************
  42:.\Generated_Source\PSoC5/RTC_1_INT.c **** * Function Name:   RTC_1_EverySecondHandler
  43:.\Generated_Source\PSoC5/RTC_1_INT.c **** ********************************************************************************
  44:.\Generated_Source\PSoC5/RTC_1_INT.c **** *
  45:.\Generated_Source\PSoC5/RTC_1_INT.c **** * Summary:
  46:.\Generated_Source\PSoC5/RTC_1_INT.c **** *  This function is called every second.
  47:.\Generated_Source\PSoC5/RTC_1_INT.c **** *
  48:.\Generated_Source\PSoC5/RTC_1_INT.c **** * Parameters:
  49:.\Generated_Source\PSoC5/RTC_1_INT.c **** *  None.
  50:.\Generated_Source\PSoC5/RTC_1_INT.c **** *
  51:.\Generated_Source\PSoC5/RTC_1_INT.c **** * Return:
  52:.\Generated_Source\PSoC5/RTC_1_INT.c **** *  None.
  53:.\Generated_Source\PSoC5/RTC_1_INT.c **** *
  54:.\Generated_Source\PSoC5/RTC_1_INT.c **** *******************************************************************************/
  55:.\Generated_Source\PSoC5/RTC_1_INT.c **** static void RTC_1_EverySecondHandler(void)
  56:.\Generated_Source\PSoC5/RTC_1_INT.c **** {
  57:.\Generated_Source\PSoC5/RTC_1_INT.c ****     /*  Place your every second handler code here. */
  58:.\Generated_Source\PSoC5/RTC_1_INT.c ****     /* `#START EVERY_SECOND_HANDLER_CODE` */
  59:.\Generated_Source\PSoC5/RTC_1_INT.c ****     MyRTC_1_EverySecondHandler();
  60:.\Generated_Source\PSoC5/RTC_1_INT.c ****     /* `#END` */
  61:.\Generated_Source\PSoC5/RTC_1_INT.c ****     
  62:.\Generated_Source\PSoC5/RTC_1_INT.c ****     #ifdef RTC_1_EVERY_SECOND_HANDLER_CALLBACK
  63:.\Generated_Source\PSoC5/RTC_1_INT.c ****         RTC_1_EverySecondHandler_Callback();
  64:.\Generated_Source\PSoC5/RTC_1_INT.c ****     #endif /* RTC_1_EVERY_SECOND_HANDLER_CALLBACK */
  65:.\Generated_Source\PSoC5/RTC_1_INT.c **** }
  66:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
  67:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
  68:.\Generated_Source\PSoC5/RTC_1_INT.c **** /*******************************************************************************
  69:.\Generated_Source\PSoC5/RTC_1_INT.c **** * Function Name:   RTC_1_EveryMinuteHandler
  70:.\Generated_Source\PSoC5/RTC_1_INT.c **** ********************************************************************************
  71:.\Generated_Source\PSoC5/RTC_1_INT.c **** *
  72:.\Generated_Source\PSoC5/RTC_1_INT.c **** * Summary:
  73:.\Generated_Source\PSoC5/RTC_1_INT.c **** *  This function is called every minute.
  74:.\Generated_Source\PSoC5/RTC_1_INT.c **** *
  75:.\Generated_Source\PSoC5/RTC_1_INT.c **** * Parameters:
  76:.\Generated_Source\PSoC5/RTC_1_INT.c **** *  None.
  77:.\Generated_Source\PSoC5/RTC_1_INT.c **** *
  78:.\Generated_Source\PSoC5/RTC_1_INT.c **** * Return:
  79:.\Generated_Source\PSoC5/RTC_1_INT.c **** *  None.
  80:.\Generated_Source\PSoC5/RTC_1_INT.c **** *
  81:.\Generated_Source\PSoC5/RTC_1_INT.c **** *******************************************************************************/
  82:.\Generated_Source\PSoC5/RTC_1_INT.c **** static void RTC_1_EveryMinuteHandler(void)
  83:.\Generated_Source\PSoC5/RTC_1_INT.c **** {
  84:.\Generated_Source\PSoC5/RTC_1_INT.c ****     /*  Place your every minute handler code here. */
  85:.\Generated_Source\PSoC5/RTC_1_INT.c ****     /* `#START EVERY_MINUTE_HANDLER_CODE` */
  86:.\Generated_Source\PSoC5/RTC_1_INT.c ****     MyRTC_1_EveryMinuteHandler();
  87:.\Generated_Source\PSoC5/RTC_1_INT.c ****     /* `#END` */
  88:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
  89:.\Generated_Source\PSoC5/RTC_1_INT.c ****     #ifdef RTC_1_EVERY_MINUTE_HANDLER_CALLBACK
ARM GAS  C:\Users\nosak\AppData\Local\Temp\cc03czBb.s 			page 3


  90:.\Generated_Source\PSoC5/RTC_1_INT.c ****         RTC_1_EveryMinuteHandler_Callback();
  91:.\Generated_Source\PSoC5/RTC_1_INT.c ****     #endif /* RTC_1_EVERY_MINUTE_HANDLER_CALLBACK */    
  92:.\Generated_Source\PSoC5/RTC_1_INT.c **** }
  93:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
  94:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
  95:.\Generated_Source\PSoC5/RTC_1_INT.c **** /*******************************************************************************
  96:.\Generated_Source\PSoC5/RTC_1_INT.c **** * Function Name:   RTC_1_EveryHourHandler
  97:.\Generated_Source\PSoC5/RTC_1_INT.c **** ********************************************************************************
  98:.\Generated_Source\PSoC5/RTC_1_INT.c **** *
  99:.\Generated_Source\PSoC5/RTC_1_INT.c **** * Summary:
 100:.\Generated_Source\PSoC5/RTC_1_INT.c **** *  This function is called every hour.
 101:.\Generated_Source\PSoC5/RTC_1_INT.c **** *
 102:.\Generated_Source\PSoC5/RTC_1_INT.c **** * Parameters:
 103:.\Generated_Source\PSoC5/RTC_1_INT.c **** *  None.
 104:.\Generated_Source\PSoC5/RTC_1_INT.c **** *
 105:.\Generated_Source\PSoC5/RTC_1_INT.c **** * Return:
 106:.\Generated_Source\PSoC5/RTC_1_INT.c **** *  None.
 107:.\Generated_Source\PSoC5/RTC_1_INT.c **** *
 108:.\Generated_Source\PSoC5/RTC_1_INT.c **** *******************************************************************************/
 109:.\Generated_Source\PSoC5/RTC_1_INT.c **** static void RTC_1_EveryHourHandler(void)
 110:.\Generated_Source\PSoC5/RTC_1_INT.c **** {
  26              		.loc 1 110 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 08B5     		push	{r3, lr}
  31              		.cfi_def_cfa_offset 8
  32              		.cfi_offset 3, -8
  33              		.cfi_offset 14, -4
 111:.\Generated_Source\PSoC5/RTC_1_INT.c ****     /*  Place your every hour handler code here. */
 112:.\Generated_Source\PSoC5/RTC_1_INT.c ****     /* `#START EVERY_HOUR_HANDLER_CODE` */
 113:.\Generated_Source\PSoC5/RTC_1_INT.c ****     MyRTC_1_EveryHourHandler();
  34              		.loc 1 113 0
  35 0002 FFF7FEFF 		bl	MyRTC_1_EveryHourHandler
  36              	.LVL0:
  37 0006 08BD     		pop	{r3, pc}
  38              		.cfi_endproc
  39              	.LFE2:
  40              		.size	RTC_1_EveryHourHandler, .-RTC_1_EveryHourHandler
  41              		.section	.text.RTC_1_EveryMinuteHandler,"ax",%progbits
  42              		.align	2
  43              		.thumb
  44              		.thumb_func
  45              		.type	RTC_1_EveryMinuteHandler, %function
  46              	RTC_1_EveryMinuteHandler:
  47              	.LFB1:
  83:.\Generated_Source\PSoC5/RTC_1_INT.c ****     /*  Place your every minute handler code here. */
  48              		.loc 1 83 0
  49              		.cfi_startproc
  50              		@ args = 0, pretend = 0, frame = 0
  51              		@ frame_needed = 0, uses_anonymous_args = 0
  52 0000 08B5     		push	{r3, lr}
  53              		.cfi_def_cfa_offset 8
  54              		.cfi_offset 3, -8
  55              		.cfi_offset 14, -4
  86:.\Generated_Source\PSoC5/RTC_1_INT.c ****     /* `#END` */
  56              		.loc 1 86 0
ARM GAS  C:\Users\nosak\AppData\Local\Temp\cc03czBb.s 			page 4


  57 0002 FFF7FEFF 		bl	MyRTC_1_EveryMinuteHandler
  58              	.LVL1:
  59 0006 08BD     		pop	{r3, pc}
  60              		.cfi_endproc
  61              	.LFE1:
  62              		.size	RTC_1_EveryMinuteHandler, .-RTC_1_EveryMinuteHandler
  63              		.section	.text.RTC_1_EverySecondHandler,"ax",%progbits
  64              		.align	2
  65              		.thumb
  66              		.thumb_func
  67              		.type	RTC_1_EverySecondHandler, %function
  68              	RTC_1_EverySecondHandler:
  69              	.LFB0:
  56:.\Generated_Source\PSoC5/RTC_1_INT.c ****     /*  Place your every second handler code here. */
  70              		.loc 1 56 0
  71              		.cfi_startproc
  72              		@ args = 0, pretend = 0, frame = 0
  73              		@ frame_needed = 0, uses_anonymous_args = 0
  74 0000 08B5     		push	{r3, lr}
  75              		.cfi_def_cfa_offset 8
  76              		.cfi_offset 3, -8
  77              		.cfi_offset 14, -4
  59:.\Generated_Source\PSoC5/RTC_1_INT.c ****     /* `#END` */
  78              		.loc 1 59 0
  79 0002 FFF7FEFF 		bl	MyRTC_1_EverySecondHandler
  80              	.LVL2:
  81 0006 08BD     		pop	{r3, pc}
  82              		.cfi_endproc
  83              	.LFE0:
  84              		.size	RTC_1_EverySecondHandler, .-RTC_1_EverySecondHandler
  85              		.section	.text.RTC_1_ISR,"ax",%progbits
  86              		.align	2
  87              		.global	RTC_1_ISR
  88              		.thumb
  89              		.thumb_func
  90              		.type	RTC_1_ISR, %function
  91              	RTC_1_ISR:
  92              	.LFB7:
 114:.\Generated_Source\PSoC5/RTC_1_INT.c ****     /* `#END` */
 115:.\Generated_Source\PSoC5/RTC_1_INT.c ****     
 116:.\Generated_Source\PSoC5/RTC_1_INT.c ****     #ifdef RTC_1_EVERY_HOUR_HANDLER_CALLBACK
 117:.\Generated_Source\PSoC5/RTC_1_INT.c ****         RTC_1_EveryHourHandler_Callback();
 118:.\Generated_Source\PSoC5/RTC_1_INT.c ****     #endif /* RTC_1_EVERY_HOUR_HANDLER_CALLBACK */
 119:.\Generated_Source\PSoC5/RTC_1_INT.c **** }
 120:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 121:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 122:.\Generated_Source\PSoC5/RTC_1_INT.c **** /*******************************************************************************
 123:.\Generated_Source\PSoC5/RTC_1_INT.c **** * Function Name:   RTC_1_EveryDayHandler
 124:.\Generated_Source\PSoC5/RTC_1_INT.c **** ********************************************************************************
 125:.\Generated_Source\PSoC5/RTC_1_INT.c **** *
 126:.\Generated_Source\PSoC5/RTC_1_INT.c **** * Summary:
 127:.\Generated_Source\PSoC5/RTC_1_INT.c **** *  This function is called every day.
 128:.\Generated_Source\PSoC5/RTC_1_INT.c **** *
 129:.\Generated_Source\PSoC5/RTC_1_INT.c **** * Parameters:
 130:.\Generated_Source\PSoC5/RTC_1_INT.c **** *  None.
 131:.\Generated_Source\PSoC5/RTC_1_INT.c **** *
 132:.\Generated_Source\PSoC5/RTC_1_INT.c **** * Return:
ARM GAS  C:\Users\nosak\AppData\Local\Temp\cc03czBb.s 			page 5


 133:.\Generated_Source\PSoC5/RTC_1_INT.c **** *  None.
 134:.\Generated_Source\PSoC5/RTC_1_INT.c **** *
 135:.\Generated_Source\PSoC5/RTC_1_INT.c **** *******************************************************************************/
 136:.\Generated_Source\PSoC5/RTC_1_INT.c **** static void RTC_1_EveryDayHandler(void)
 137:.\Generated_Source\PSoC5/RTC_1_INT.c **** {
 138:.\Generated_Source\PSoC5/RTC_1_INT.c ****     /*  Place your everyday handler code here. */
 139:.\Generated_Source\PSoC5/RTC_1_INT.c ****     /* `#START EVERY_DAY_HANDLER_CODE` */
 140:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 141:.\Generated_Source\PSoC5/RTC_1_INT.c ****     /* `#END` */
 142:.\Generated_Source\PSoC5/RTC_1_INT.c ****     
 143:.\Generated_Source\PSoC5/RTC_1_INT.c ****     #ifdef RTC_1_EVERY_DAY_HANDLER_CALLBACK
 144:.\Generated_Source\PSoC5/RTC_1_INT.c ****         RTC_1_EveryDayHandler_Callback();
 145:.\Generated_Source\PSoC5/RTC_1_INT.c ****     #endif /* RTC_1_EVERY_DAY_HANDLER_CALLBACK */
 146:.\Generated_Source\PSoC5/RTC_1_INT.c **** }
 147:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 148:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 149:.\Generated_Source\PSoC5/RTC_1_INT.c **** /*******************************************************************************
 150:.\Generated_Source\PSoC5/RTC_1_INT.c **** * Function Name:   RTC_1_EveryWeekHandler
 151:.\Generated_Source\PSoC5/RTC_1_INT.c **** ********************************************************************************
 152:.\Generated_Source\PSoC5/RTC_1_INT.c **** *
 153:.\Generated_Source\PSoC5/RTC_1_INT.c **** * Summary:
 154:.\Generated_Source\PSoC5/RTC_1_INT.c **** *  This function is called every week.
 155:.\Generated_Source\PSoC5/RTC_1_INT.c **** *
 156:.\Generated_Source\PSoC5/RTC_1_INT.c **** * Parameters:
 157:.\Generated_Source\PSoC5/RTC_1_INT.c **** *  None.
 158:.\Generated_Source\PSoC5/RTC_1_INT.c **** *
 159:.\Generated_Source\PSoC5/RTC_1_INT.c **** * Return:
 160:.\Generated_Source\PSoC5/RTC_1_INT.c **** *  None.
 161:.\Generated_Source\PSoC5/RTC_1_INT.c **** *
 162:.\Generated_Source\PSoC5/RTC_1_INT.c **** *******************************************************************************/
 163:.\Generated_Source\PSoC5/RTC_1_INT.c **** static void RTC_1_EveryWeekHandler(void)
 164:.\Generated_Source\PSoC5/RTC_1_INT.c **** {
 165:.\Generated_Source\PSoC5/RTC_1_INT.c ****     /*  Place your every week handler code here. */
 166:.\Generated_Source\PSoC5/RTC_1_INT.c ****     /* `#START EVERY_WEEK_HANDLER_CODE` */
 167:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 168:.\Generated_Source\PSoC5/RTC_1_INT.c ****     /* `#END` */
 169:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 170:.\Generated_Source\PSoC5/RTC_1_INT.c ****     #ifdef RTC_1_EVERY_WEEK_HANDLER_CALLBACK
 171:.\Generated_Source\PSoC5/RTC_1_INT.c ****         RTC_1_EveryWeekHandler_Callback();
 172:.\Generated_Source\PSoC5/RTC_1_INT.c ****     #endif /* RTC_1_EVERY_WEEK_HANDLER_CALLBACK */
 173:.\Generated_Source\PSoC5/RTC_1_INT.c **** }
 174:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 175:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 176:.\Generated_Source\PSoC5/RTC_1_INT.c **** /*******************************************************************************
 177:.\Generated_Source\PSoC5/RTC_1_INT.c **** * Function Name:   RTC_1_EveryMonthHandler
 178:.\Generated_Source\PSoC5/RTC_1_INT.c **** ********************************************************************************
 179:.\Generated_Source\PSoC5/RTC_1_INT.c **** *
 180:.\Generated_Source\PSoC5/RTC_1_INT.c **** * Summary:
 181:.\Generated_Source\PSoC5/RTC_1_INT.c **** *  This function is called every month.
 182:.\Generated_Source\PSoC5/RTC_1_INT.c **** *
 183:.\Generated_Source\PSoC5/RTC_1_INT.c **** * Parameters:
 184:.\Generated_Source\PSoC5/RTC_1_INT.c **** *  None.
 185:.\Generated_Source\PSoC5/RTC_1_INT.c **** *
 186:.\Generated_Source\PSoC5/RTC_1_INT.c **** * Return:
 187:.\Generated_Source\PSoC5/RTC_1_INT.c **** *  None.
 188:.\Generated_Source\PSoC5/RTC_1_INT.c **** *
 189:.\Generated_Source\PSoC5/RTC_1_INT.c **** *******************************************************************************/
ARM GAS  C:\Users\nosak\AppData\Local\Temp\cc03czBb.s 			page 6


 190:.\Generated_Source\PSoC5/RTC_1_INT.c **** static void RTC_1_EveryMonthHandler(void)
 191:.\Generated_Source\PSoC5/RTC_1_INT.c **** {
 192:.\Generated_Source\PSoC5/RTC_1_INT.c ****     /*  Place your every month handler code here. */
 193:.\Generated_Source\PSoC5/RTC_1_INT.c ****     /* `#START EVERY_MONTH_HANDLER_CODE` */
 194:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 195:.\Generated_Source\PSoC5/RTC_1_INT.c ****     /* `#END` */
 196:.\Generated_Source\PSoC5/RTC_1_INT.c ****     
 197:.\Generated_Source\PSoC5/RTC_1_INT.c ****     #ifdef RTC_1_EVERY_MONTH_HANDLER_CALLBACK
 198:.\Generated_Source\PSoC5/RTC_1_INT.c ****         RTC_1_EveryMonthHandler_Callback();
 199:.\Generated_Source\PSoC5/RTC_1_INT.c ****     #endif /* RTC_1_EVERY_MONTH_HANDLER_CALLBACK */
 200:.\Generated_Source\PSoC5/RTC_1_INT.c **** }
 201:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 202:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 203:.\Generated_Source\PSoC5/RTC_1_INT.c **** /*******************************************************************************
 204:.\Generated_Source\PSoC5/RTC_1_INT.c **** * Function Name:   RTC_1_EveryYearHandler
 205:.\Generated_Source\PSoC5/RTC_1_INT.c **** ********************************************************************************
 206:.\Generated_Source\PSoC5/RTC_1_INT.c **** *
 207:.\Generated_Source\PSoC5/RTC_1_INT.c **** * Summary:
 208:.\Generated_Source\PSoC5/RTC_1_INT.c **** *  This function is called every year.
 209:.\Generated_Source\PSoC5/RTC_1_INT.c **** *
 210:.\Generated_Source\PSoC5/RTC_1_INT.c **** * Parameters:
 211:.\Generated_Source\PSoC5/RTC_1_INT.c **** *  None.
 212:.\Generated_Source\PSoC5/RTC_1_INT.c **** *
 213:.\Generated_Source\PSoC5/RTC_1_INT.c **** * Return:
 214:.\Generated_Source\PSoC5/RTC_1_INT.c **** *  None.
 215:.\Generated_Source\PSoC5/RTC_1_INT.c **** *
 216:.\Generated_Source\PSoC5/RTC_1_INT.c **** *******************************************************************************/
 217:.\Generated_Source\PSoC5/RTC_1_INT.c **** static void RTC_1_EveryYearHandler(void)
 218:.\Generated_Source\PSoC5/RTC_1_INT.c **** {
 219:.\Generated_Source\PSoC5/RTC_1_INT.c ****     /*  Place your every year handler code here. */
 220:.\Generated_Source\PSoC5/RTC_1_INT.c ****     /* `#START EVERY_YEAR_HANDLER_CODE` */
 221:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 222:.\Generated_Source\PSoC5/RTC_1_INT.c ****     /* `#END` */
 223:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 224:.\Generated_Source\PSoC5/RTC_1_INT.c ****     #ifdef RTC_1_EVERY_YEAR_HANDLER_CALLBACK
 225:.\Generated_Source\PSoC5/RTC_1_INT.c ****         RTC_1_EveryYearHandler_Callback();
 226:.\Generated_Source\PSoC5/RTC_1_INT.c ****     #endif /* RTC_1_EVERY_YEAR_HANDLER_CALLBACK */    
 227:.\Generated_Source\PSoC5/RTC_1_INT.c **** }
 228:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 229:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 230:.\Generated_Source\PSoC5/RTC_1_INT.c **** /*******************************************************************************
 231:.\Generated_Source\PSoC5/RTC_1_INT.c **** * Function Name: RTC_1_ISR
 232:.\Generated_Source\PSoC5/RTC_1_INT.c **** ********************************************************************************
 233:.\Generated_Source\PSoC5/RTC_1_INT.c **** *
 234:.\Generated_Source\PSoC5/RTC_1_INT.c **** * Summary:
 235:.\Generated_Source\PSoC5/RTC_1_INT.c **** *  This ISR is executed on 1PPS (one pulse per second) event.
 236:.\Generated_Source\PSoC5/RTC_1_INT.c **** *  Global interrupt must be enabled to invoke this ISR.
 237:.\Generated_Source\PSoC5/RTC_1_INT.c **** *  This interrupt trigs every second.
 238:.\Generated_Source\PSoC5/RTC_1_INT.c **** *
 239:.\Generated_Source\PSoC5/RTC_1_INT.c **** * Parameters:
 240:.\Generated_Source\PSoC5/RTC_1_INT.c **** *  None.
 241:.\Generated_Source\PSoC5/RTC_1_INT.c **** *
 242:.\Generated_Source\PSoC5/RTC_1_INT.c **** * Return:
 243:.\Generated_Source\PSoC5/RTC_1_INT.c **** *  None.
 244:.\Generated_Source\PSoC5/RTC_1_INT.c **** *
 245:.\Generated_Source\PSoC5/RTC_1_INT.c **** * Global variables:
 246:.\Generated_Source\PSoC5/RTC_1_INT.c **** * RTC_1_currentTimeDate, RTC_1_dstTimeDateStart,
ARM GAS  C:\Users\nosak\AppData\Local\Temp\cc03czBb.s 			page 7


 247:.\Generated_Source\PSoC5/RTC_1_INT.c **** *  RTC_1_dstTimeDateStop, RTC_1_dstTimeDateStart,
 248:.\Generated_Source\PSoC5/RTC_1_INT.c **** *  RTC_1_alarmCfgTimeDate, RTC_1_statusDateTime,
 249:.\Generated_Source\PSoC5/RTC_1_INT.c **** *  RTC_1_dstStartStatus, RTC_1_dstStartStatus,
 250:.\Generated_Source\PSoC5/RTC_1_INT.c **** *  RTC_1_dstStopStatus, RTC_1_alarmCurStatus: global
 251:.\Generated_Source\PSoC5/RTC_1_INT.c **** *  variables are used for the time/date, DST and alarm update procedure.
 252:.\Generated_Source\PSoC5/RTC_1_INT.c **** *
 253:.\Generated_Source\PSoC5/RTC_1_INT.c **** *  RTC_1_dstTimeDateStart and RTC_1_currentTimeDate:
 254:.\Generated_Source\PSoC5/RTC_1_INT.c **** *  are modified with the updated values.
 255:.\Generated_Source\PSoC5/RTC_1_INT.c **** *
 256:.\Generated_Source\PSoC5/RTC_1_INT.c **** *  RTC_1_statusDateTime, RTC_1_dstStartStatus,
 257:.\Generated_Source\PSoC5/RTC_1_INT.c **** *  RTC_1_dstStartStatus, RTC_1_dstStopStatus,
 258:.\Generated_Source\PSoC5/RTC_1_INT.c **** *  RTC_1_alarmCurStatus: global variables could be modified while
 259:.\Generated_Source\PSoC5/RTC_1_INT.c **** *  current time/date is updated.
 260:.\Generated_Source\PSoC5/RTC_1_INT.c **** *
 261:.\Generated_Source\PSoC5/RTC_1_INT.c **** * Side Effects:
 262:.\Generated_Source\PSoC5/RTC_1_INT.c **** *  Clears all interrupt status bits (react_int, limact_int, onepps_int, ctw_int,
 263:.\Generated_Source\PSoC5/RTC_1_INT.c **** *  and  ftw_int) in Power Manager Interrupt Status Register. If an interrupt
 264:.\Generated_Source\PSoC5/RTC_1_INT.c **** *  gets generated at the same time as a clear, the bit will remain set (which
 265:.\Generated_Source\PSoC5/RTC_1_INT.c **** *  causes another interrupt).
 266:.\Generated_Source\PSoC5/RTC_1_INT.c **** *
 267:.\Generated_Source\PSoC5/RTC_1_INT.c **** *******************************************************************************/
 268:.\Generated_Source\PSoC5/RTC_1_INT.c **** CY_ISR(RTC_1_ISR)
 269:.\Generated_Source\PSoC5/RTC_1_INT.c **** {
  93              		.loc 1 269 0
  94              		.cfi_startproc
  95              		@ args = 0, pretend = 0, frame = 0
  96              		@ frame_needed = 0, uses_anonymous_args = 0
  97 0000 08B5     		push	{r3, lr}
  98              		.cfi_def_cfa_offset 8
  99              		.cfi_offset 3, -8
 100              		.cfi_offset 14, -4
 270:.\Generated_Source\PSoC5/RTC_1_INT.c ****     uint8 RTC_1_tmp;
 271:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 272:.\Generated_Source\PSoC5/RTC_1_INT.c ****     #ifdef RTC_1_ISR_ENTRY_CALLBACK
 273:.\Generated_Source\PSoC5/RTC_1_INT.c ****         RTC_1_ISR_EntryCallback();
 274:.\Generated_Source\PSoC5/RTC_1_INT.c ****     #endif /* RTC_1_ISR_ENTRY_CALLBACK */
 275:.\Generated_Source\PSoC5/RTC_1_INT.c ****     
 276:.\Generated_Source\PSoC5/RTC_1_INT.c ****     /* Clear OPPS interrupt status flag */
 277:.\Generated_Source\PSoC5/RTC_1_INT.c ****     (void) CyPmReadStatus(CY_PM_ONEPPS_INT);
 101              		.loc 1 277 0
 102 0002 0420     		movs	r0, #4
 103 0004 FFF7FEFF 		bl	CyPmReadStatus
 104              	.LVL3:
 278:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 279:.\Generated_Source\PSoC5/RTC_1_INT.c ****     /* Increment seconds counter */
 280:.\Generated_Source\PSoC5/RTC_1_INT.c ****     RTC_1_currentTimeDate.Sec++;
 105              		.loc 1 280 0
 106 0008 944A     		ldr	r2, .L46
 107 000a 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 108 000c 0133     		adds	r3, r3, #1
 109 000e DBB2     		uxtb	r3, r3
 110 0010 1370     		strb	r3, [r2]
 281:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 282:.\Generated_Source\PSoC5/RTC_1_INT.c ****     /* Check if minute elapsed */
 283:.\Generated_Source\PSoC5/RTC_1_INT.c ****     if(RTC_1_currentTimeDate.Sec > RTC_1_MINUTE_ELAPSED)
 111              		.loc 1 283 0
 112 0012 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
ARM GAS  C:\Users\nosak\AppData\Local\Temp\cc03czBb.s 			page 8


 113 0014 DBB2     		uxtb	r3, r3
 114 0016 3B2B     		cmp	r3, #59
 115 0018 40F2D781 		bls	.L8
 284:.\Generated_Source\PSoC5/RTC_1_INT.c ****     {
 285:.\Generated_Source\PSoC5/RTC_1_INT.c ****         /* Inc Min */
 286:.\Generated_Source\PSoC5/RTC_1_INT.c ****         RTC_1_currentTimeDate.Min++;
 116              		.loc 1 286 0
 117 001c 5378     		ldrb	r3, [r2, #1]	@ zero_extendqisi2
 118 001e 0133     		adds	r3, r3, #1
 119 0020 DBB2     		uxtb	r3, r3
 120 0022 5370     		strb	r3, [r2, #1]
 287:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 288:.\Generated_Source\PSoC5/RTC_1_INT.c ****         /* Clear Sec */
 289:.\Generated_Source\PSoC5/RTC_1_INT.c ****         RTC_1_currentTimeDate.Sec = 0u;
 121              		.loc 1 289 0
 122 0024 0023     		movs	r3, #0
 123 0026 1370     		strb	r3, [r2]
 290:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 291:.\Generated_Source\PSoC5/RTC_1_INT.c ****         if(RTC_1_currentTimeDate.Min > RTC_1_HOUR_ELAPSED)
 124              		.loc 1 291 0
 125 0028 5378     		ldrb	r3, [r2, #1]	@ zero_extendqisi2
 126 002a DBB2     		uxtb	r3, r3
 127 002c 3B2B     		cmp	r3, #59
 128 002e 40F29C81 		bls	.L9
 292:.\Generated_Source\PSoC5/RTC_1_INT.c ****         {
 293:.\Generated_Source\PSoC5/RTC_1_INT.c ****             /* Inc HOUR */
 294:.\Generated_Source\PSoC5/RTC_1_INT.c ****             RTC_1_currentTimeDate.Hour++;
 129              		.loc 1 294 0
 130 0032 9378     		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 131 0034 0133     		adds	r3, r3, #1
 132 0036 DBB2     		uxtb	r3, r3
 133 0038 9370     		strb	r3, [r2, #2]
 295:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 296:.\Generated_Source\PSoC5/RTC_1_INT.c ****             /* Clear Min */
 297:.\Generated_Source\PSoC5/RTC_1_INT.c ****             RTC_1_currentTimeDate.Min = 0u;
 134              		.loc 1 297 0
 135 003a 0023     		movs	r3, #0
 136 003c 5370     		strb	r3, [r2, #1]
 298:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 299:.\Generated_Source\PSoC5/RTC_1_INT.c ****             /* Day roll over */
 300:.\Generated_Source\PSoC5/RTC_1_INT.c ****             if(RTC_1_currentTimeDate.Hour > RTC_1_DAY_ELAPSED)
 137              		.loc 1 300 0
 138 003e 9378     		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 139 0040 DBB2     		uxtb	r3, r3
 140 0042 172B     		cmp	r3, #23
 141 0044 40F25181 		bls	.L10
 301:.\Generated_Source\PSoC5/RTC_1_INT.c ****             {
 302:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 /* Inc DayOfMonth */
 303:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 RTC_1_currentTimeDate.DayOfMonth++;
 142              		.loc 1 303 0
 143 0048 1346     		mov	r3, r2
 144 004a 1279     		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 145 004c 0132     		adds	r2, r2, #1
 146 004e D2B2     		uxtb	r2, r2
 147 0050 1A71     		strb	r2, [r3, #4]
 304:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 305:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 /* Clear Hour */
ARM GAS  C:\Users\nosak\AppData\Local\Temp\cc03czBb.s 			page 9


 306:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 RTC_1_currentTimeDate.Hour = 0u;
 148              		.loc 1 306 0
 149 0052 0022     		movs	r2, #0
 150 0054 9A70     		strb	r2, [r3, #2]
 307:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 308:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 /* Inc DayOfYear */
 309:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 RTC_1_currentTimeDate.DayOfYear++;
 151              		.loc 1 309 0
 152 0056 DA88     		ldrh	r2, [r3, #6]
 153 0058 0132     		adds	r2, r2, #1
 154 005a 92B2     		uxth	r2, r2
 155 005c DA80     		strh	r2, [r3, #6]	@ movhi
 310:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 311:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 /* Inc DayOfWeek */
 312:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 RTC_1_currentTimeDate.DayOfWeek++;
 156              		.loc 1 312 0
 157 005e DA78     		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 158 0060 0132     		adds	r2, r2, #1
 159 0062 D2B2     		uxtb	r2, r2
 160 0064 DA70     		strb	r2, [r3, #3]
 313:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 314:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 /* Check DayOfWeek */
 315:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 if(RTC_1_currentTimeDate.DayOfWeek > RTC_1_WEEK_ELAPSED)
 161              		.loc 1 315 0
 162 0066 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 163 0068 DBB2     		uxtb	r3, r3
 164 006a 072B     		cmp	r3, #7
 165 006c 02D9     		bls	.L11
 316:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 {
 317:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     /* start new week */
 318:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     RTC_1_currentTimeDate.DayOfWeek = 1u;
 166              		.loc 1 318 0
 167 006e 0122     		movs	r2, #1
 168 0070 7A4B     		ldr	r3, .L46
 169 0072 DA70     		strb	r2, [r3, #3]
 170              	.L11:
 319:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 }
 320:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 321:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 /* Day of month roll over.
 322:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 * Check if day of month greater than 29 in February of leap year or
 323:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 * if day of month greater than 28 NOT in February of NON leap year or
 324:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 * if day of month greater than it should be in every month in non leap year
 325:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 */
 326:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 if(((0u != (RTC_1_statusDateTime & RTC_1_STATUS_LY)) &&
 171              		.loc 1 326 0
 172 0074 7A4B     		ldr	r3, .L46+4
 173 0076 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 174 0078 13F0020F 		tst	r3, #2
 175 007c 0ED0     		beq	.L12
 327:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     (RTC_1_currentTimeDate.Month == RTC_1_FEBRUARY)  &&
 176              		.loc 1 327 0 discriminator 1
 177 007e 774B     		ldr	r3, .L46
 178 0080 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 179 0082 DBB2     		uxtb	r3, r3
 326:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     (RTC_1_currentTimeDate.Month == RTC_1_FEBRUARY)  &&
 180              		.loc 1 326 0 discriminator 1
 181 0084 022B     		cmp	r3, #2
ARM GAS  C:\Users\nosak\AppData\Local\Temp\cc03czBb.s 			page 10


 182 0086 09D1     		bne	.L12
 328:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     (RTC_1_currentTimeDate.DayOfMonth >
 183              		.loc 1 328 0
 184 0088 744B     		ldr	r3, .L46
 185 008a 1A79     		ldrb	r2, [r3, #4]	@ zero_extendqisi2
 186 008c D2B2     		uxtb	r2, r2
 329:.\Generated_Source\PSoC5/RTC_1_INT.c ****                              (RTC_1_daysInMonths[RTC_1_currentTimeDate.Month - 1u] + 1u))) ||
 187              		.loc 1 329 0
 188 008e 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 189 0090 013B     		subs	r3, r3, #1
 190 0092 7449     		ldr	r1, .L46+8
 191 0094 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 192 0096 0133     		adds	r3, r3, #1
 327:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     (RTC_1_currentTimeDate.DayOfMonth >
 193              		.loc 1 327 0
 194 0098 9A42     		cmp	r2, r3
 195 009a 22D8     		bhi	.L13
 196              	.L12:
 330:.\Generated_Source\PSoC5/RTC_1_INT.c ****                    ((0u != (RTC_1_statusDateTime & RTC_1_STATUS_LY))  &&
 197              		.loc 1 330 0
 198 009c 704B     		ldr	r3, .L46+4
 199 009e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 329:.\Generated_Source\PSoC5/RTC_1_INT.c ****                              (RTC_1_daysInMonths[RTC_1_currentTimeDate.Month - 1u] + 1u))) ||
 200              		.loc 1 329 0
 201 00a0 13F0020F 		tst	r3, #2
 202 00a4 0DD0     		beq	.L14
 331:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     (RTC_1_currentTimeDate.Month != RTC_1_FEBRUARY) &&
 203              		.loc 1 331 0
 204 00a6 6D4B     		ldr	r3, .L46
 205 00a8 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 206 00aa DBB2     		uxtb	r3, r3
 330:.\Generated_Source\PSoC5/RTC_1_INT.c ****                    ((0u != (RTC_1_statusDateTime & RTC_1_STATUS_LY))  &&
 207              		.loc 1 330 0
 208 00ac 022B     		cmp	r3, #2
 209 00ae 08D0     		beq	.L14
 332:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     (RTC_1_currentTimeDate.DayOfMonth >
 210              		.loc 1 332 0
 211 00b0 6A4A     		ldr	r2, .L46
 212 00b2 1379     		ldrb	r3, [r2, #4]	@ zero_extendqisi2
 213 00b4 DBB2     		uxtb	r3, r3
 333:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                     RTC_1_daysInMonths[RTC_1_currentTimeDate.Month - 1u])) ||
 214              		.loc 1 333 0
 215 00b6 127A     		ldrb	r2, [r2, #8]	@ zero_extendqisi2
 216 00b8 013A     		subs	r2, r2, #1
 217 00ba 6A49     		ldr	r1, .L46+8
 218 00bc 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 331:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     (RTC_1_currentTimeDate.Month != RTC_1_FEBRUARY) &&
 219              		.loc 1 331 0
 220 00be 9342     		cmp	r3, r2
 221 00c0 0FD8     		bhi	.L13
 222              	.L14:
 334:.\Generated_Source\PSoC5/RTC_1_INT.c ****                    ((0u == (RTC_1_statusDateTime & RTC_1_STATUS_LY))  &&
 223              		.loc 1 334 0
 224 00c2 674B     		ldr	r3, .L46+4
 225 00c4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 333:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                     RTC_1_daysInMonths[RTC_1_currentTimeDate.Month - 1u])) ||
 226              		.loc 1 333 0
ARM GAS  C:\Users\nosak\AppData\Local\Temp\cc03czBb.s 			page 11


 227 00c6 13F0020F 		tst	r3, #2
 228 00ca 40F09C80 		bne	.L15
 335:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     (RTC_1_currentTimeDate.DayOfMonth >
 229              		.loc 1 335 0
 230 00ce 634A     		ldr	r2, .L46
 231 00d0 1379     		ldrb	r3, [r2, #4]	@ zero_extendqisi2
 232 00d2 DBB2     		uxtb	r3, r3
 336:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                     RTC_1_daysInMonths[RTC_1_currentTimeDate.Month - 1u])))
 233              		.loc 1 336 0
 234 00d4 127A     		ldrb	r2, [r2, #8]	@ zero_extendqisi2
 235 00d6 013A     		subs	r2, r2, #1
 236 00d8 6249     		ldr	r1, .L46+8
 237 00da 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 334:.\Generated_Source\PSoC5/RTC_1_INT.c ****                    ((0u == (RTC_1_statusDateTime & RTC_1_STATUS_LY))  &&
 238              		.loc 1 334 0
 239 00dc 9342     		cmp	r3, r2
 240 00de 40F29280 		bls	.L15
 241              	.L13:
 337:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 {
 338:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     /* Inc Month */
 339:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     RTC_1_currentTimeDate.Month++;
 242              		.loc 1 339 0
 243 00e2 5E4A     		ldr	r2, .L46
 244 00e4 137A     		ldrb	r3, [r2, #8]	@ zero_extendqisi2
 245 00e6 0133     		adds	r3, r3, #1
 246 00e8 DBB2     		uxtb	r3, r3
 247 00ea 1372     		strb	r3, [r2, #8]
 340:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 341:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     /* Set first day of month */
 342:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     RTC_1_currentTimeDate.DayOfMonth = 1u;
 248              		.loc 1 342 0
 249 00ec 0123     		movs	r3, #1
 250 00ee 1371     		strb	r3, [r2, #4]
 343:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 344:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     /* Year roll over */
 345:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     if(RTC_1_currentTimeDate.Month > RTC_1_YEAR_ELAPSED)
 251              		.loc 1 345 0
 252 00f0 137A     		ldrb	r3, [r2, #8]	@ zero_extendqisi2
 253 00f2 DBB2     		uxtb	r3, r3
 254 00f4 0C2B     		cmp	r3, #12
 255 00f6 5BD9     		bls	.L16
 346:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     {
 347:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         /* Inc Year */
 348:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         RTC_1_currentTimeDate.Year++;
 256              		.loc 1 348 0
 257 00f8 1346     		mov	r3, r2
 258 00fa 5289     		ldrh	r2, [r2, #10]
 259 00fc 0132     		adds	r2, r2, #1
 260 00fe 92B2     		uxth	r2, r2
 261 0100 5A81     		strh	r2, [r3, #10]	@ movhi
 349:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 350:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         /* Set first month of year */
 351:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         RTC_1_currentTimeDate.Month = 1u;
 262              		.loc 1 351 0
 263 0102 0122     		movs	r2, #1
 264 0104 1A72     		strb	r2, [r3, #8]
 352:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
ARM GAS  C:\Users\nosak\AppData\Local\Temp\cc03czBb.s 			page 12


 353:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         /* Set first day of year */
 354:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         RTC_1_currentTimeDate.DayOfYear = 1u;
 265              		.loc 1 354 0
 266 0106 DA80     		strh	r2, [r3, #6]	@ movhi
 355:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 356:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         /* Is this year leap */
 357:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         if(1u == RTC_1_LEAP_YEAR(RTC_1_currentTimeDate.Year))
 267              		.loc 1 357 0
 268 0108 5B89     		ldrh	r3, [r3, #10]
 269 010a 9BB2     		uxth	r3, r3
 270 010c 564A     		ldr	r2, .L46+12
 271 010e A2FB0312 		umull	r1, r2, r2, r3
 272 0112 D209     		lsrs	r2, r2, #7
 273 0114 4FF4C871 		mov	r1, #400
 274 0118 01FB1233 		mls	r3, r1, r2, r3
 275 011c 9BB2     		uxth	r3, r3
 276 011e 83B1     		cbz	r3, .L17
 277              		.loc 1 357 0 is_stmt 0 discriminator 1
 278 0120 4E4B     		ldr	r3, .L46
 279 0122 5B89     		ldrh	r3, [r3, #10]
 280 0124 13F0030F 		tst	r3, #3
 281 0128 11D1     		bne	.L18
 282              		.loc 1 357 0 discriminator 2
 283 012a 4C4B     		ldr	r3, .L46
 284 012c 5B89     		ldrh	r3, [r3, #10]
 285 012e 9BB2     		uxth	r3, r3
 286 0130 4D4A     		ldr	r2, .L46+12
 287 0132 A2FB0312 		umull	r1, r2, r2, r3
 288 0136 5209     		lsrs	r2, r2, #5
 289 0138 6421     		movs	r1, #100
 290 013a 01FB1233 		mls	r3, r1, r2, r3
 291 013e 9BB2     		uxth	r3, r3
 292 0140 2BB1     		cbz	r3, .L18
 293              	.L17:
 358:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         {
 359:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             /* Set leap year flag */
 360:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             RTC_1_statusDateTime |= RTC_1_STATUS_LY;
 294              		.loc 1 360 0 is_stmt 1
 295 0142 474A     		ldr	r2, .L46+4
 296 0144 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 297 0146 43F00203 		orr	r3, r3, #2
 298 014a 1370     		strb	r3, [r2]
 299 014c 04E0     		b	.L19
 300              	.L18:
 361:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         }
 362:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         else    /* not leap year */
 363:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         {
 364:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             /* Clear leap year */
 365:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             RTC_1_statusDateTime &= (uint8)(~RTC_1_STATUS_LY);
 301              		.loc 1 365 0
 302 014e 444A     		ldr	r2, .L46+4
 303 0150 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 304 0152 03F0FD03 		and	r3, r3, #253
 305 0156 1370     		strb	r3, [r2]
 306              	.L19:
 366:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         }
 367:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
ARM GAS  C:\Users\nosak\AppData\Local\Temp\cc03czBb.s 			page 13


 368:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         /* Alarm YEAR */
 369:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         if(0u != RTC_1_IS_BIT_SET(RTC_1_alarmCfgMask,
 307              		.loc 1 369 0
 308 0158 444B     		ldr	r3, .L46+16
 309 015a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 310 015c 13F0800F 		tst	r3, #128
 311 0160 12D0     		beq	.L20
 370:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                                              RTC_1_ALARM_YEAR_MASK))
 371:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         {
 372:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             /* Years match */
 373:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             if(RTC_1_alarmCfgTimeDate.Year == RTC_1_currentTimeDate.Year)
 312              		.loc 1 373 0
 313 0162 434B     		ldr	r3, .L46+20
 314 0164 5A89     		ldrh	r2, [r3, #10]
 315 0166 92B2     		uxth	r2, r2
 316 0168 3C4B     		ldr	r3, .L46
 317 016a 5B89     		ldrh	r3, [r3, #10]
 318 016c 9BB2     		uxth	r3, r3
 319 016e 9A42     		cmp	r2, r3
 320 0170 05D1     		bne	.L21
 374:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             {
 375:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                 /* Rise year alarm */
 376:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                 RTC_1_alarmCurStatus |= RTC_1_ALARM_YEAR_MASK;
 321              		.loc 1 376 0
 322 0172 404A     		ldr	r2, .L46+24
 323 0174 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 324 0176 43F08003 		orr	r3, r3, #128
 325 017a 1370     		strb	r3, [r2]
 326 017c 04E0     		b	.L20
 327              	.L21:
 377:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             }
 378:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             else    /* Years do not match */
 379:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             {
 380:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                 /* Clear year alarm */
 381:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                 RTC_1_alarmCurStatus &= (uint8)(~RTC_1_ALARM_YEAR_MASK);
 328              		.loc 1 381 0
 329 017e 3D4A     		ldr	r2, .L46+24
 330 0180 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 331 0182 03F07F03 		and	r3, r3, #127
 332 0186 1370     		strb	r3, [r2]
 333              	.L20:
 382:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             }
 383:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         } /* do not alarm year */
 384:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 385:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         /* Set Alarm flag event */
 386:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         RTC_1_tmp = RTC_1_alarmCfgMask;
 334              		.loc 1 386 0
 335 0188 384B     		ldr	r3, .L46+16
 336 018a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 337              	.LVL4:
 387:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         RTC_1_SET_ALARM(RTC_1_tmp,
 338              		.loc 1 387 0
 339 018c 03F0FF02 		and	r2, r3, #255
 340 0190 63B1     		cbz	r3, .L22
 341              		.loc 1 387 0 is_stmt 0 discriminator 1
 342 0192 384B     		ldr	r3, .L46+24
 343              	.LVL5:
ARM GAS  C:\Users\nosak\AppData\Local\Temp\cc03czBb.s 			page 14


 344 0194 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 345 0196 1340     		ands	r3, r3, r2
 346 0198 9342     		cmp	r3, r2
 347 019a 07D1     		bne	.L22
 348              		.loc 1 387 0 discriminator 2
 349 019c 304A     		ldr	r2, .L46+4
 350 019e 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 351 01a0 43F00803 		orr	r3, r3, #8
 352 01a4 1370     		strb	r3, [r2]
 353 01a6 0022     		movs	r2, #0
 354 01a8 324B     		ldr	r3, .L46+24
 355 01aa 1A70     		strb	r2, [r3]
 356              	.L22:
 388:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                                    RTC_1_alarmCurStatus,
 389:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                                    RTC_1_statusDateTime);
 390:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 391:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         /* Every Year */
 392:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         if(0u != RTC_1_IS_BIT_SET(RTC_1_intervalCfgMask,
 357              		.loc 1 392 0 is_stmt 1
 358 01ac 324B     		ldr	r3, .L46+28
 359 01ae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 360              	.L16:
 393:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                                              RTC_1_INTERVAL_YEAR_MASK))
 394:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         {
 395:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             RTC_1_EveryYearHandler();
 396:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         }
 397:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 398:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     } /* Month > 12 */
 399:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 400:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     /* Alarm MONTH */
 401:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     if(0u != RTC_1_IS_BIT_SET(RTC_1_alarmCfgMask,
 361              		.loc 1 401 0
 362 01b0 2E4B     		ldr	r3, .L46+16
 363 01b2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 364 01b4 13F0400F 		tst	r3, #64
 365 01b8 11D0     		beq	.L23
 402:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                                          RTC_1_ALARM_MONTH_MASK))
 403:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     {
 404:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         if(RTC_1_alarmCfgTimeDate.Month == RTC_1_currentTimeDate.Month)
 366              		.loc 1 404 0
 367 01ba 2D4B     		ldr	r3, .L46+20
 368 01bc 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 369 01be 274A     		ldr	r2, .L46
 370 01c0 127A     		ldrb	r2, [r2, #8]	@ zero_extendqisi2
 371 01c2 DBB2     		uxtb	r3, r3
 372 01c4 9342     		cmp	r3, r2
 373 01c6 05D1     		bne	.L24
 405:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         {
 406:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             /* Set month alarm */
 407:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             RTC_1_alarmCurStatus |= RTC_1_ALARM_MONTH_MASK;
 374              		.loc 1 407 0
 375 01c8 2A4A     		ldr	r2, .L46+24
 376 01ca 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 377 01cc 43F04003 		orr	r3, r3, #64
 378 01d0 1370     		strb	r3, [r2]
 379 01d2 04E0     		b	.L23
 380              	.L24:
ARM GAS  C:\Users\nosak\AppData\Local\Temp\cc03czBb.s 			page 15


 408:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         }
 409:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         else
 410:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         {
 411:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             /* Clear month alarm */
 412:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             RTC_1_alarmCurStatus &= (uint8)(~RTC_1_ALARM_MONTH_MASK);
 381              		.loc 1 412 0
 382 01d4 274A     		ldr	r2, .L46+24
 383 01d6 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 384 01d8 03F0BF03 		and	r3, r3, #191
 385 01dc 1370     		strb	r3, [r2]
 386              	.L23:
 413:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         }
 414:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     }   /* Month alarm is masked */
 415:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 416:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     #if (1u == RTC_1_DST_FUNC_ENABLE)
 417:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         if(RTC_1_dstTimeDateStop.Month == RTC_1_currentTimeDate.Month)
 418:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         {
 419:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             RTC_1_dstStopStatus |= RTC_1_DST_MONTH;
 420:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         }
 421:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         else
 422:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         {
 423:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             RTC_1_dstStopStatus &= (uint8)(~RTC_1_DST_MONTH);
 424:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         }
 425:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 426:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         if(RTC_1_dstTimeDateStart.Month == RTC_1_currentTimeDate.Month)
 427:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         {
 428:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             RTC_1_dstStartStatus |= RTC_1_DST_MONTH;
 429:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         }
 430:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         else
 431:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         {
 432:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             RTC_1_dstStartStatus &= (uint8)(~RTC_1_DST_MONTH);
 433:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         }
 434:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     #endif /* 1u == RTC_1_DST_FUNC_ENABLE */
 435:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 436:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     /* Set Alarm flag event */
 437:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     RTC_1_tmp = RTC_1_alarmCfgMask;
 387              		.loc 1 437 0
 388 01de 234B     		ldr	r3, .L46+16
 389 01e0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 390              	.LVL6:
 438:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     RTC_1_SET_ALARM(RTC_1_tmp,
 391              		.loc 1 438 0
 392 01e2 03F0FF02 		and	r2, r3, #255
 393 01e6 63B1     		cbz	r3, .L25
 394              		.loc 1 438 0 is_stmt 0 discriminator 1
 395 01e8 224B     		ldr	r3, .L46+24
 396              	.LVL7:
 397 01ea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 398 01ec 1340     		ands	r3, r3, r2
 399 01ee 9342     		cmp	r3, r2
 400 01f0 07D1     		bne	.L25
 401              		.loc 1 438 0 discriminator 2
 402 01f2 1B4A     		ldr	r2, .L46+4
 403 01f4 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 404 01f6 43F00803 		orr	r3, r3, #8
 405 01fa 1370     		strb	r3, [r2]
 406 01fc 0022     		movs	r2, #0
ARM GAS  C:\Users\nosak\AppData\Local\Temp\cc03czBb.s 			page 16


 407 01fe 1D4B     		ldr	r3, .L46+24
 408 0200 1A70     		strb	r2, [r3]
 409              	.L25:
 439:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                                RTC_1_alarmCurStatus,
 440:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                                RTC_1_statusDateTime);
 441:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 442:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     /* Every Month */
 443:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     if(0u != RTC_1_IS_BIT_SET(RTC_1_intervalCfgMask,
 410              		.loc 1 443 0 is_stmt 1
 411 0202 1D4B     		ldr	r3, .L46+28
 412 0204 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 413              	.L15:
 444:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                                          RTC_1_INTERVAL_MONTH_MASK))
 445:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     {
 446:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         RTC_1_EveryMonthHandler();
 447:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     }
 448:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 }   /* Day roll over */
 449:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 450:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 /* Alarm DAYOFWEEK */
 451:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 if(0u != RTC_1_IS_BIT_SET(RTC_1_alarmCfgMask,
 414              		.loc 1 451 0
 415 0206 194B     		ldr	r3, .L46+16
 416 0208 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 417 020a 13F0080F 		tst	r3, #8
 418 020e 11D0     		beq	.L26
 452:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                                      RTC_1_ALARM_DAYOFWEEK_MASK))
 453:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 {
 454:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     if(RTC_1_alarmCfgTimeDate.DayOfWeek == RTC_1_currentTimeDate.DayOfWeek)
 419              		.loc 1 454 0
 420 0210 174B     		ldr	r3, .L46+20
 421 0212 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 422 0214 114A     		ldr	r2, .L46
 423 0216 D278     		ldrb	r2, [r2, #3]	@ zero_extendqisi2
 424 0218 DBB2     		uxtb	r3, r3
 425 021a 9342     		cmp	r3, r2
 426 021c 05D1     		bne	.L27
 455:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     {
 456:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         /* Set day of week alarm */
 457:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         RTC_1_alarmCurStatus |= RTC_1_ALARM_DAYOFWEEK_MASK;
 427              		.loc 1 457 0
 428 021e 154A     		ldr	r2, .L46+24
 429 0220 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 430 0222 43F00803 		orr	r3, r3, #8
 431 0226 1370     		strb	r3, [r2]
 432 0228 04E0     		b	.L26
 433              	.L27:
 458:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     }
 459:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     else
 460:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     {
 461:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         /* Clear day of week alarm */
 462:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         RTC_1_alarmCurStatus &= (uint8)(~RTC_1_ALARM_DAYOFWEEK_MASK);
 434              		.loc 1 462 0
 435 022a 124A     		ldr	r2, .L46+24
 436 022c 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 437 022e 03F0F703 		and	r3, r3, #247
 438 0232 1370     		strb	r3, [r2]
 439              	.L26:
ARM GAS  C:\Users\nosak\AppData\Local\Temp\cc03czBb.s 			page 17


 463:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     }
 464:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 }   /* Day of week alarm is masked */
 465:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 466:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 /* Alarm DAYOFYEAR */
 467:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 if(0u != RTC_1_IS_BIT_SET(RTC_1_alarmCfgMask,
 440              		.loc 1 467 0
 441 0234 0D4B     		ldr	r3, .L46+16
 442 0236 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 443 0238 13F0200F 		tst	r3, #32
 444 023c 23D0     		beq	.L28
 468:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                                      RTC_1_ALARM_DAYOFYEAR_MASK))
 469:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 {
 470:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     if(RTC_1_alarmCfgTimeDate.DayOfYear == RTC_1_currentTimeDate.DayOfYear)
 445              		.loc 1 470 0
 446 023e 0C4B     		ldr	r3, .L46+20
 447 0240 DA88     		ldrh	r2, [r3, #6]
 448 0242 92B2     		uxth	r2, r2
 449 0244 054B     		ldr	r3, .L46
 450 0246 DB88     		ldrh	r3, [r3, #6]
 451 0248 9BB2     		uxth	r3, r3
 452 024a 9A42     		cmp	r2, r3
 453 024c 16D1     		bne	.L29
 471:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     {
 472:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         /* Set day of year alarm */
 473:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         RTC_1_alarmCurStatus |= RTC_1_ALARM_DAYOFYEAR_MASK;
 454              		.loc 1 473 0
 455 024e 094A     		ldr	r2, .L46+24
 456 0250 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 457 0252 43F02003 		orr	r3, r3, #32
 458 0256 1370     		strb	r3, [r2]
 459 0258 15E0     		b	.L28
 460              	.L47:
 461 025a 00BF     		.align	2
 462              	.L46:
 463 025c 00000000 		.word	RTC_1_currentTimeDate
 464 0260 00000000 		.word	RTC_1_statusDateTime
 465 0264 00000000 		.word	RTC_1_daysInMonths
 466 0268 1F85EB51 		.word	1374389535
 467 026c 00000000 		.word	RTC_1_alarmCfgMask
 468 0270 00000000 		.word	RTC_1_alarmCfgTimeDate
 469 0274 00000000 		.word	RTC_1_alarmCurStatus
 470 0278 00000000 		.word	RTC_1_intervalCfgMask
 471              	.L29:
 474:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     }
 475:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     else
 476:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     {
 477:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         /* Clear day of year alarm */
 478:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         RTC_1_alarmCurStatus &= (uint8)(~RTC_1_ALARM_DAYOFYEAR_MASK);
 472              		.loc 1 478 0
 473 027c 6B4A     		ldr	r2, .L48
 474 027e 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 475 0280 03F0DF03 		and	r3, r3, #223
 476 0284 1370     		strb	r3, [r2]
 477              	.L28:
 479:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     }
 480:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 }   /* Day of year alarm is masked */
 481:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
ARM GAS  C:\Users\nosak\AppData\Local\Temp\cc03czBb.s 			page 18


 482:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 /* Alarm DAYOFMONTH */
 483:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 if(0u != RTC_1_IS_BIT_SET(RTC_1_alarmCfgMask,
 478              		.loc 1 483 0
 479 0286 6A4B     		ldr	r3, .L48+4
 480 0288 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 481 028a 13F0100F 		tst	r3, #16
 482 028e 11D0     		beq	.L30
 484:.\Generated_Source\PSoC5/RTC_1_INT.c ****                          RTC_1_ALARM_DAYOFMONTH_MASK))
 485:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 {
 486:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     if(RTC_1_alarmCfgTimeDate.DayOfMonth == RTC_1_currentTimeDate.DayOfMonth)
 483              		.loc 1 486 0
 484 0290 684B     		ldr	r3, .L48+8
 485 0292 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 486 0294 684A     		ldr	r2, .L48+12
 487 0296 1279     		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 488 0298 DBB2     		uxtb	r3, r3
 489 029a 9342     		cmp	r3, r2
 490 029c 05D1     		bne	.L31
 487:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     {
 488:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         /* Set day of month alarm */
 489:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         RTC_1_alarmCurStatus |= RTC_1_ALARM_DAYOFMONTH_MASK;
 491              		.loc 1 489 0
 492 029e 634A     		ldr	r2, .L48
 493 02a0 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 494 02a2 43F01003 		orr	r3, r3, #16
 495 02a6 1370     		strb	r3, [r2]
 496 02a8 04E0     		b	.L30
 497              	.L31:
 490:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     }
 491:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     else
 492:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     {
 493:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         /* Clear day of month alarm */
 494:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         RTC_1_alarmCurStatus &= (uint8)(~RTC_1_ALARM_DAYOFMONTH_MASK);
 498              		.loc 1 494 0
 499 02aa 604A     		ldr	r2, .L48
 500 02ac 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 501 02ae 03F0EF03 		and	r3, r3, #239
 502 02b2 1370     		strb	r3, [r2]
 503              	.L30:
 495:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     }
 496:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 }   /* Day of month alarm is masked */
 497:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 498:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 #if (1u == RTC_1_DST_FUNC_ENABLE)
 499:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     if(RTC_1_dstTimeDateStop.DayOfMonth == RTC_1_currentTimeDate.DayOfMonth)
 500:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     {
 501:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         RTC_1_dstStopStatus |= RTC_1_DST_DAYOFMONTH;
 502:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     }
 503:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     else
 504:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     {
 505:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         RTC_1_dstStopStatus &= (uint8)(~RTC_1_DST_DAYOFMONTH);
 506:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     }
 507:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 508:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     if(RTC_1_dstTimeDateStart.DayOfMonth == RTC_1_currentTimeDate.DayOfMonth)
 509:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     {
 510:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         RTC_1_dstStartStatus |= RTC_1_DST_DAYOFMONTH;
 511:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     }
 512:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     else
ARM GAS  C:\Users\nosak\AppData\Local\Temp\cc03czBb.s 			page 19


 513:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     {
 514:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         RTC_1_dstStartStatus &= (uint8)(~RTC_1_DST_DAYOFMONTH);
 515:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     }
 516:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 #endif /* 1u == RTC_1_DST_FUNC_ENABLE */
 517:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 518:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 /* Set Alarm flag event */
 519:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 RTC_1_tmp = RTC_1_alarmCfgMask;
 504              		.loc 1 519 0
 505 02b4 5E4B     		ldr	r3, .L48+4
 506 02b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 507              	.LVL8:
 520:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 RTC_1_SET_ALARM(RTC_1_tmp,
 508              		.loc 1 520 0
 509 02b8 03F0FF02 		and	r2, r3, #255
 510 02bc 63B1     		cbz	r3, .L32
 511              		.loc 1 520 0 is_stmt 0 discriminator 1
 512 02be 5B4B     		ldr	r3, .L48
 513              	.LVL9:
 514 02c0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 515 02c2 1340     		ands	r3, r3, r2
 516 02c4 9342     		cmp	r3, r2
 517 02c6 07D1     		bne	.L32
 518              		.loc 1 520 0 discriminator 2
 519 02c8 5C4A     		ldr	r2, .L48+16
 520 02ca 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 521 02cc 43F00803 		orr	r3, r3, #8
 522 02d0 1370     		strb	r3, [r2]
 523 02d2 0022     		movs	r2, #0
 524 02d4 554B     		ldr	r3, .L48
 525 02d6 1A70     		strb	r2, [r3]
 526              	.L32:
 521:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                            RTC_1_alarmCurStatus,
 522:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                            RTC_1_statusDateTime);
 523:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 524:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 /* Every Day */
 525:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 if(0u != RTC_1_IS_BIT_SET(RTC_1_intervalCfgMask,
 527              		.loc 1 525 0 is_stmt 1
 528 02d8 594B     		ldr	r3, .L48+20
 529 02da 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 526:.\Generated_Source\PSoC5/RTC_1_INT.c ****                          RTC_1_INTERVAL_DAY_MASK))
 527:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 {
 528:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     RTC_1_EveryDayHandler();
 529:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 }
 530:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 531:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 if(1u == RTC_1_currentTimeDate.DayOfWeek)
 530              		.loc 1 531 0
 531 02dc 564B     		ldr	r3, .L48+12
 532 02de DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 533 02e0 DBB2     		uxtb	r3, r3
 534 02e2 012B     		cmp	r3, #1
 535 02e4 01D1     		bne	.L10
 532:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 {
 533:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     /* Every Week */
 534:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     if(0u != RTC_1_IS_BIT_SET(RTC_1_intervalCfgMask,
 536              		.loc 1 534 0
 537 02e6 564B     		ldr	r3, .L48+20
 538 02e8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\nosak\AppData\Local\Temp\cc03czBb.s 			page 20


 539              	.L10:
 535:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                                          RTC_1_INTERVAL_WEEK_MASK))
 536:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     {
 537:.\Generated_Source\PSoC5/RTC_1_INT.c ****                        RTC_1_EveryWeekHandler();
 538:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     }
 539:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 }
 540:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 541:.\Generated_Source\PSoC5/RTC_1_INT.c ****             } /* End of day roll over */
 542:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 543:.\Generated_Source\PSoC5/RTC_1_INT.c ****             /* Status set PM/AM flag */
 544:.\Generated_Source\PSoC5/RTC_1_INT.c ****             if(RTC_1_currentTimeDate.Hour < RTC_1_HALF_OF_DAY_ELAPSED)
 540              		.loc 1 544 0
 541 02ea 534B     		ldr	r3, .L48+12
 542 02ec 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 543 02ee DBB2     		uxtb	r3, r3
 544 02f0 0B2B     		cmp	r3, #11
 545 02f2 05D8     		bhi	.L33
 545:.\Generated_Source\PSoC5/RTC_1_INT.c ****             {
 546:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 /* AM Hour 00:00-11:59, flag zero */
 547:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 RTC_1_statusDateTime &= (uint8)(~RTC_1_STATUS_AM_PM);
 546              		.loc 1 547 0
 547 02f4 514A     		ldr	r2, .L48+16
 548 02f6 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 549 02f8 03F0FB03 		and	r3, r3, #251
 550 02fc 1370     		strb	r3, [r2]
 551 02fe 04E0     		b	.L34
 552              	.L33:
 548:.\Generated_Source\PSoC5/RTC_1_INT.c ****             }
 549:.\Generated_Source\PSoC5/RTC_1_INT.c ****             else
 550:.\Generated_Source\PSoC5/RTC_1_INT.c ****             {
 551:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 /* PM Hour 12:00-23:59, flag set */
 552:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 RTC_1_statusDateTime |= RTC_1_STATUS_AM_PM;
 553              		.loc 1 552 0
 554 0300 4E4A     		ldr	r2, .L48+16
 555 0302 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 556 0304 43F00403 		orr	r3, r3, #4
 557 0308 1370     		strb	r3, [r2]
 558              	.L34:
 553:.\Generated_Source\PSoC5/RTC_1_INT.c ****             }
 554:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 555:.\Generated_Source\PSoC5/RTC_1_INT.c ****             #if (1u == RTC_1_DST_FUNC_ENABLE)
 556:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 if(RTC_1_dstTimeDateStop.Hour == RTC_1_currentTimeDate.Hour)
 557:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 {
 558:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     RTC_1_dstStopStatus |= RTC_1_DST_HOUR;
 559:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 }
 560:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 else
 561:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 {
 562:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     RTC_1_dstStopStatus &= (uint8)(~RTC_1_DST_HOUR);
 563:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 }
 564:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 565:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 if(RTC_1_dstTimeDateStart.Hour == RTC_1_currentTimeDate.Hour)
 566:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 {
 567:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     RTC_1_dstStartStatus |= RTC_1_DST_HOUR;
 568:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 }
 569:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 else
 570:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 {
 571:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 RTC_1_dstStartStatus &= (uint8)(~RTC_1_DST_HOUR);
ARM GAS  C:\Users\nosak\AppData\Local\Temp\cc03czBb.s 			page 21


 572:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 }
 573:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 574:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 /* DST Enable ? */
 575:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 if(0u != RTC_1_IS_BIT_SET(RTC_1_dstModeType, RTC_1_DST_ENABLE))
 576:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 {
 577:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     if(0u != RTC_1_IS_BIT_SET(RTC_1_statusDateTime, RTC_1_STATUS_DST))
 578:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     {
 579:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         if(0u != RTC_1_IS_BIT_SET(RTC_1_dstStopStatus, RTC_1_DST_HOUR |
 580:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                                        RTC_1_DST_DAYOFMONTH | RTC_1_DST_MONTH))
 581:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         {
 582:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             /* Substruct from current value of minutes, number of minutes
 583:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             * in DST offset which is out of complete hour
 584:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             */
 585:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             RTC_1_currentTimeDate.Min -=
 586:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                                 RTC_1_dstOffsetMin % (RTC_1_HOUR_ELAPSED + 1u);
 587:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 588:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             /* Is minute value negative? */
 589:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             if(RTC_1_currentTimeDate.Min > RTC_1_HOUR_ELAPSED)
 590:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             {
 591:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                 /* Convert to the positive.
 592:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                 * HOUR_ELAPSED -     (~currentTimeDate.Min    ) ==
 593:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                 * HOUR_ELAPSED + 1 - (~currentTimeDate.Min + 1)
 594:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                 */
 595:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                 RTC_1_currentTimeDate.Min = RTC_1_HOUR_ELAPSED -
 596:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                                              ((uint8)(~RTC_1_currentTimeDate.Min));
 597:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 598:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                 RTC_1_currentTimeDate.Hour--;
 599:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             }
 600:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 601:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             RTC_1_currentTimeDate.Hour -= RTC_1_dstOffsetMin /
 602:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                                                      (RTC_1_HOUR_ELAPSED + 1u);
 603:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 604:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             /* Day roll over
 605:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             * Is hour value negative? */
 606:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             if(RTC_1_currentTimeDate.Hour > RTC_1_DAY_ELAPSED)
 607:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             {
 608:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                 /* Convert to the positive.
 609:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                 * DAY_ELAPSED - (~currentTimeDate.Hour) ==
 610:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                 * DAY_ELAPSED + 1 - (~currentTimeDate.Hour + 1)
 611:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                 */
 612:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                 RTC_1_currentTimeDate.Hour = RTC_1_DAY_ELAPSED -
 613:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                                               ((uint8)(~RTC_1_currentTimeDate.Hour)
 614:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 615:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                 /* Status set PM/AM flag */
 616:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                 if(RTC_1_currentTimeDate.Hour < RTC_1_HALF_OF_DAY_ELAPSED)
 617:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                 {
 618:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                     /* AM Hour 00:00-11:59, flag zero */
 619:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                     RTC_1_statusDateTime &= (uint8)(~RTC_1_STATUS_AM_PM);
 620:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                 }
 621:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                 else
 622:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                 {
 623:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                     /* PM Hour 12:00-23:59, flag set */
 624:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                     RTC_1_statusDateTime |= RTC_1_STATUS_AM_PM;
 625:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                 }
 626:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 627:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                 RTC_1_currentTimeDate.DayOfMonth--;
 628:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                 RTC_1_currentTimeDate.DayOfYear--;
ARM GAS  C:\Users\nosak\AppData\Local\Temp\cc03czBb.s 			page 22


 629:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                 RTC_1_currentTimeDate.DayOfWeek--;
 630:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 631:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                 if(0u == RTC_1_currentTimeDate.DayOfWeek)
 632:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                 {
 633:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                     RTC_1_currentTimeDate.DayOfWeek = RTC_1_DAYS_IN_WEEK;
 634:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                 }
 635:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 636:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                 if(0u == RTC_1_currentTimeDate.DayOfMonth)
 637:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                 {
 638:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                     RTC_1_currentTimeDate.Month--;
 639:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                     if(0u == RTC_1_currentTimeDate.Month)
 640:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                     {
 641:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                         RTC_1_currentTimeDate.Month = RTC_1_DECEMBER;
 642:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 643:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                         RTC_1_currentTimeDate.DayOfMonth =
 644:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                             RTC_1_daysInMonths[RTC_1_currentTimeDate.Month - 1u];
 645:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 646:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                         RTC_1_currentTimeDate.Year--;
 647:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 648:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                         if(1u == RTC_1_LEAP_YEAR(RTC_1_currentTimeDate.Year))
 649:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                         {
 650:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                             /* LP - true, else - false */
 651:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                             RTC_1_statusDateTime |= RTC_1_STATUS_LY;
 652:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                             RTC_1_currentTimeDate.DayOfYear =
 653:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                                                                     RTC_1_DAYS_IN_L
 654:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                         }
 655:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                         else
 656:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                         {
 657:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                             RTC_1_statusDateTime &= (uint8)(~RTC_1_STATUS_LY);
 658:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                             RTC_1_currentTimeDate.DayOfYear = RTC_1_DAYS_IN_YEAR;
 659:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                         }
 660:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                         RTC_1_EveryYearHandler();
 661:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                     }
 662:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                     else
 663:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                     {
 664:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                         /* Day of month roll over.
 665:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                         * Check if day of month February 29 of leap year
 666:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                         */
 667:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                         if((0u != (RTC_1_statusDateTime & RTC_1_STATUS_LY)) &&
 668:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                             (RTC_1_currentTimeDate.Month == RTC_1_FEBRUARY))
 669:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                         {
 670:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                             RTC_1_currentTimeDate.DayOfMonth =
 671:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                             RTC_1_daysInMonths[RTC_1_currentTimeDate.Month - 1u]
 672:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                             + 1u;
 673:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                         }
 674:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                         else
 675:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                         {
 676:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                             RTC_1_currentTimeDate.DayOfMonth =
 677:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                             RTC_1_daysInMonths[RTC_1_currentTimeDate.Month - 1u];
 678:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                         }
 679:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                     }
 680:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                     RTC_1_EveryMonthHandler();
 681:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                 }
 682:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                 RTC_1_EveryDayHandler();
 683:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             }
 684:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             RTC_1_statusDateTime &= (uint8)(~RTC_1_STATUS_DST);
 685:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             RTC_1_dstStopStatus = 0u;
ARM GAS  C:\Users\nosak\AppData\Local\Temp\cc03czBb.s 			page 23


 686:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         }
 687:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     }
 688:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     else
 689:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     {
 690:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         if(0u != RTC_1_IS_BIT_SET(RTC_1_dstStartStatus,
 691:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                                       (RTC_1_DST_HOUR | RTC_1_DST_DAYOFMONTH |
 692:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                                        RTC_1_DST_MONTH)))
 693:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         {
 694:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             /* Add Hour and Min */
 695:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             RTC_1_currentTimeDate.Min +=
 696:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                                 RTC_1_dstOffsetMin % (RTC_1_HOUR_ELAPSED + 1u);
 697:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 698:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             if(RTC_1_currentTimeDate.Min > RTC_1_HOUR_ELAPSED)
 699:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             {
 700:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                 /* Adjust Min */
 701:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                 RTC_1_currentTimeDate.Min -= (RTC_1_HOUR_ELAPSED + 1u);
 702:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                 RTC_1_currentTimeDate.Hour++;
 703:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             }
 704:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 705:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             RTC_1_currentTimeDate.Hour += RTC_1_dstOffsetMin /
 706:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                                                      (RTC_1_HOUR_ELAPSED + 1u);
 707:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 708:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             if(RTC_1_currentTimeDate.Hour > RTC_1_DAY_ELAPSED)
 709:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             {
 710:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                 /* Adjust hour, add day */
 711:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                 RTC_1_currentTimeDate.Hour -= (RTC_1_DAY_ELAPSED + 1u);
 712:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 713:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                 /* Status set PM/AM flag */
 714:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                 if(RTC_1_currentTimeDate.Hour < RTC_1_HALF_OF_DAY_ELAPSED)
 715:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                 {
 716:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                     /* AM Hour 00:00-11:59, flag zero */
 717:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                     RTC_1_statusDateTime &= (uint8)(~RTC_1_STATUS_AM_PM);
 718:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                 }
 719:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                 else
 720:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                 {
 721:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                     /* PM Hour 12:00-23:59, flag set */
 722:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                     RTC_1_statusDateTime |= RTC_1_STATUS_AM_PM;
 723:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                 }
 724:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 725:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                 RTC_1_currentTimeDate.DayOfMonth++;
 726:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                 RTC_1_currentTimeDate.DayOfYear++;
 727:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                 RTC_1_currentTimeDate.DayOfWeek++;
 728:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 729:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                 if(RTC_1_currentTimeDate.DayOfWeek > RTC_1_WEEK_ELAPSED)
 730:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                 {
 731:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                     RTC_1_currentTimeDate.DayOfWeek = 1u;
 732:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                 }
 733:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 734:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                 /* Day of month roll over.
 735:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                 * Check if day of month greater than 29 in February of leap year or
 736:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                 * if day of month greater than 28 NOT in February of NON leap year 
 737:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                 * if day of month greater than it should be in every month in non l
 738:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                 */
 739:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                 if(((0u != (RTC_1_statusDateTime & RTC_1_STATUS_LY)) &&
 740:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                     (RTC_1_currentTimeDate.Month == RTC_1_FEBRUARY)  &&
 741:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                     (RTC_1_currentTimeDate.DayOfMonth >
 742:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                   (RTC_1_daysInMonths[RTC_1_currentTimeDate.Month - 1u] + 1u))) ||
ARM GAS  C:\Users\nosak\AppData\Local\Temp\cc03czBb.s 			page 24


 743:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                    ((0u != (RTC_1_statusDateTime & RTC_1_STATUS_LY)) &&
 744:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                     (RTC_1_currentTimeDate.Month != RTC_1_FEBRUARY)  &&
 745:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                     (RTC_1_currentTimeDate.DayOfMonth >
 746:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                      RTC_1_daysInMonths[RTC_1_currentTimeDate.Month - 1u])) ||
 747:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                    ((0u == (RTC_1_statusDateTime & RTC_1_STATUS_LY)) &&
 748:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                     (RTC_1_currentTimeDate.DayOfMonth >
 749:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                      RTC_1_daysInMonths[RTC_1_currentTimeDate.Month - 1u])))
 750:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                 {
 751:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                     RTC_1_currentTimeDate.Month++;
 752:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                     RTC_1_currentTimeDate.DayOfMonth = 1u;
 753:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                     if(RTC_1_currentTimeDate.Month > RTC_1_YEAR_ELAPSED)
 754:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                     {
 755:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                         RTC_1_currentTimeDate.Month = RTC_1_JANUARY;
 756:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                         RTC_1_currentTimeDate.Year++;
 757:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 758:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                         if(1u == RTC_1_LEAP_YEAR(RTC_1_currentTimeDate.Year))
 759:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                         {
 760:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                             /* LP - true, else - false */
 761:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                             RTC_1_statusDateTime |= RTC_1_STATUS_LY;
 762:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                         }
 763:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                         else
 764:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                         {
 765:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                             RTC_1_statusDateTime &= (uint8)(~RTC_1_STATUS_LY);
 766:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                         }
 767:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                         RTC_1_currentTimeDate.DayOfYear = 1u;
 768:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 769:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                         RTC_1_EveryYearHandler();
 770:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                     }
 771:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                     RTC_1_EveryMonthHandler();
 772:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                 }
 773:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                 RTC_1_EveryDayHandler();
 774:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             }
 775:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             RTC_1_statusDateTime |= RTC_1_STATUS_DST;
 776:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             RTC_1_dstStartStatus = 0u;
 777:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 778:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             /* Month */
 779:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             if(RTC_1_dstTimeDateStop.Month == RTC_1_currentTimeDate.Month)
 780:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             {
 781:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                 RTC_1_dstStopStatus |= RTC_1_DST_MONTH;
 782:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             }
 783:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             else
 784:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             {
 785:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                 RTC_1_dstStopStatus &= (uint8)(~RTC_1_DST_MONTH);
 786:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             }
 787:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 788:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             /* DayOfMonth */
 789:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             if(RTC_1_dstTimeDateStop.DayOfMonth ==
 790:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                                                             RTC_1_currentTimeDate.D
 791:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             {
 792:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                 RTC_1_dstStopStatus |= RTC_1_DST_DAYOFMONTH;
 793:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             }
 794:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             else
 795:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             {
 796:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                 RTC_1_dstStopStatus &= (uint8)(~RTC_1_DST_DAYOFMONTH);
 797:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             }
 798:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         }
 799:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     }
ARM GAS  C:\Users\nosak\AppData\Local\Temp\cc03czBb.s 			page 25


 800:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 801:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     /* Alarm DAYOFWEEK */
 802:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     if(0u != RTC_1_IS_BIT_SET(RTC_1_alarmCfgMask,
 803:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                                          RTC_1_ALARM_DAYOFWEEK_MASK))
 804:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     {
 805:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         if(RTC_1_alarmCfgTimeDate.DayOfWeek == RTC_1_currentTimeDate.DayOfWeek)
 806:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         {
 807:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             RTC_1_alarmCurStatus |= RTC_1_ALARM_DAYOFWEEK_MASK;
 808:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         }
 809:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         else
 810:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         {
 811:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             RTC_1_alarmCurStatus &= (uint8)(~RTC_1_ALARM_DAYOFWEEK_MASK);
 812:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         }
 813:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     }
 814:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 815:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     /* Alarm DAYOFYEAR */
 816:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     if(0u != RTC_1_IS_BIT_SET(RTC_1_alarmCfgMask,
 817:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                                          RTC_1_ALARM_DAYOFYEAR_MASK))
 818:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     {
 819:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         if(RTC_1_alarmCfgTimeDate.DayOfYear == RTC_1_currentTimeDate.DayOfYear)
 820:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         {
 821:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             RTC_1_alarmCurStatus |= RTC_1_ALARM_DAYOFYEAR_MASK;
 822:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         }
 823:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         else
 824:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         {
 825:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             RTC_1_alarmCurStatus &= (uint8)(~RTC_1_ALARM_DAYOFYEAR_MASK);
 826:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         }
 827:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     }
 828:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 829:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     /* Alarm DAYOFMONTH */
 830:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     if(0u != RTC_1_IS_BIT_SET(RTC_1_alarmCfgMask,
 831:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                                          RTC_1_ALARM_DAYOFMONTH_MASK))
 832:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     {
 833:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         if(RTC_1_alarmCfgTimeDate.DayOfMonth == RTC_1_currentTimeDate.DayOfMonth)
 834:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         {
 835:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             RTC_1_alarmCurStatus |= RTC_1_ALARM_DAYOFMONTH_MASK;
 836:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         }
 837:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         else
 838:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         {
 839:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             RTC_1_alarmCurStatus &= (uint8)(~RTC_1_ALARM_DAYOFMONTH_MASK);
 840:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         }
 841:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     }
 842:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 843:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     /* Alarm MONTH */
 844:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     if(0u != RTC_1_IS_BIT_SET(RTC_1_alarmCfgMask,
 845:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                                          RTC_1_ALARM_MONTH_MASK))
 846:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     {
 847:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         if(RTC_1_alarmCfgTimeDate.Month == RTC_1_currentTimeDate.Month)
 848:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         {
 849:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             RTC_1_alarmCurStatus |= RTC_1_ALARM_MONTH_MASK;
 850:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         }
 851:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         else
 852:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         {
 853:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             RTC_1_alarmCurStatus &= (uint8)(~RTC_1_ALARM_MONTH_MASK);
 854:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         }
 855:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     }
 856:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
ARM GAS  C:\Users\nosak\AppData\Local\Temp\cc03czBb.s 			page 26


 857:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     /* Alarm YEAR */
 858:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     if(0u != RTC_1_IS_BIT_SET(RTC_1_alarmCfgMask,
 859:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                                          RTC_1_ALARM_YEAR_MASK))
 860:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     {
 861:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         if(RTC_1_alarmCfgTimeDate.Year == RTC_1_currentTimeDate.Year)
 862:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         {
 863:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             RTC_1_alarmCurStatus |= RTC_1_ALARM_YEAR_MASK;
 864:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         }
 865:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         else
 866:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         {
 867:.\Generated_Source\PSoC5/RTC_1_INT.c ****                             RTC_1_alarmCurStatus &= (uint8)(~RTC_1_ALARM_YEAR_MASK);
 868:.\Generated_Source\PSoC5/RTC_1_INT.c ****                         }
 869:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     }
 870:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 871:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     /* Set Alarm flag event */
 872:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     RTC_1_tmp = RTC_1_alarmCfgMask;
 873:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     RTC_1_SET_ALARM(RTC_1_tmp,
 874:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                                RTC_1_alarmCurStatus,
 875:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                                RTC_1_statusDateTime);
 876:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 }
 877:.\Generated_Source\PSoC5/RTC_1_INT.c ****             #endif /* 1u == RTC_1_DST_FUNC_ENABLE */
 878:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 879:.\Generated_Source\PSoC5/RTC_1_INT.c ****             /* Alarm HOUR */
 880:.\Generated_Source\PSoC5/RTC_1_INT.c ****             if(0u != RTC_1_IS_BIT_SET(RTC_1_alarmCfgMask, RTC_1_ALARM_HOUR_MASK))
 559              		.loc 1 880 0
 560 030a 494B     		ldr	r3, .L48+4
 561 030c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 562 030e 13F0040F 		tst	r3, #4
 563 0312 11D0     		beq	.L35
 881:.\Generated_Source\PSoC5/RTC_1_INT.c ****             {
 882:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 if(RTC_1_alarmCfgTimeDate.Hour == RTC_1_currentTimeDate.Hour)
 564              		.loc 1 882 0
 565 0314 474B     		ldr	r3, .L48+8
 566 0316 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 567 0318 474A     		ldr	r2, .L48+12
 568 031a 9278     		ldrb	r2, [r2, #2]	@ zero_extendqisi2
 569 031c DBB2     		uxtb	r3, r3
 570 031e 9342     		cmp	r3, r2
 571 0320 05D1     		bne	.L36
 883:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 {
 884:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     RTC_1_alarmCurStatus |= RTC_1_ALARM_HOUR_MASK;
 572              		.loc 1 884 0
 573 0322 424A     		ldr	r2, .L48
 574 0324 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 575 0326 43F00403 		orr	r3, r3, #4
 576 032a 1370     		strb	r3, [r2]
 577 032c 04E0     		b	.L35
 578              	.L36:
 885:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 }
 886:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 else
 887:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 {
 888:.\Generated_Source\PSoC5/RTC_1_INT.c ****                     RTC_1_alarmCurStatus &= (uint8)(~RTC_1_ALARM_HOUR_MASK);
 579              		.loc 1 888 0
 580 032e 3F4A     		ldr	r2, .L48
 581 0330 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 582 0332 03F0FB03 		and	r3, r3, #251
 583 0336 1370     		strb	r3, [r2]
ARM GAS  C:\Users\nosak\AppData\Local\Temp\cc03czBb.s 			page 27


 584              	.L35:
 889:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 }
 890:.\Generated_Source\PSoC5/RTC_1_INT.c ****             }
 891:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 892:.\Generated_Source\PSoC5/RTC_1_INT.c ****             /* Set Alarm flag event */
 893:.\Generated_Source\PSoC5/RTC_1_INT.c ****             RTC_1_tmp = RTC_1_alarmCfgMask;
 585              		.loc 1 893 0
 586 0338 3D4B     		ldr	r3, .L48+4
 587 033a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 588              	.LVL10:
 894:.\Generated_Source\PSoC5/RTC_1_INT.c ****             RTC_1_SET_ALARM(RTC_1_tmp,
 589              		.loc 1 894 0
 590 033c 03F0FF02 		and	r2, r3, #255
 591 0340 63B1     		cbz	r3, .L37
 592              		.loc 1 894 0 is_stmt 0 discriminator 1
 593 0342 3A4B     		ldr	r3, .L48
 594              	.LVL11:
 595 0344 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 596 0346 1340     		ands	r3, r3, r2
 597 0348 9342     		cmp	r3, r2
 598 034a 07D1     		bne	.L37
 599              		.loc 1 894 0 discriminator 2
 600 034c 3B4A     		ldr	r2, .L48+16
 601 034e 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 602 0350 43F00803 		orr	r3, r3, #8
 603 0354 1370     		strb	r3, [r2]
 604 0356 0022     		movs	r2, #0
 605 0358 344B     		ldr	r3, .L48
 606 035a 1A70     		strb	r2, [r3]
 607              	.L37:
 895:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                        RTC_1_alarmCurStatus,
 896:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                        RTC_1_statusDateTime);
 897:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 898:.\Generated_Source\PSoC5/RTC_1_INT.c ****             /* Every Hour */
 899:.\Generated_Source\PSoC5/RTC_1_INT.c ****             if(0u != RTC_1_IS_BIT_SET(RTC_1_intervalCfgMask, RTC_1_INTERVAL_HOUR_MASK))
 608              		.loc 1 899 0 is_stmt 1
 609 035c 384B     		ldr	r3, .L48+20
 610 035e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 611 0360 13F0040F 		tst	r3, #4
 612 0364 01D0     		beq	.L9
 900:.\Generated_Source\PSoC5/RTC_1_INT.c ****             {
 901:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 RTC_1_EveryHourHandler();
 613              		.loc 1 901 0
 614 0366 FFF7FEFF 		bl	RTC_1_EveryHourHandler
 615              	.LVL12:
 616              	.L9:
 902:.\Generated_Source\PSoC5/RTC_1_INT.c ****             }
 903:.\Generated_Source\PSoC5/RTC_1_INT.c ****         } /* Min > 59 = Hour */
 904:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 905:.\Generated_Source\PSoC5/RTC_1_INT.c ****         /* Alarm MIN */
 906:.\Generated_Source\PSoC5/RTC_1_INT.c ****         if(0u != RTC_1_IS_BIT_SET(RTC_1_alarmCfgMask, RTC_1_ALARM_MIN_MASK))
 617              		.loc 1 906 0
 618 036a 314B     		ldr	r3, .L48+4
 619 036c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 620 036e 13F0020F 		tst	r3, #2
 621 0372 11D0     		beq	.L38
 907:.\Generated_Source\PSoC5/RTC_1_INT.c ****         {
ARM GAS  C:\Users\nosak\AppData\Local\Temp\cc03czBb.s 			page 28


 908:.\Generated_Source\PSoC5/RTC_1_INT.c ****             if(RTC_1_alarmCfgTimeDate.Min == RTC_1_currentTimeDate.Min)
 622              		.loc 1 908 0
 623 0374 2F4B     		ldr	r3, .L48+8
 624 0376 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 625 0378 2F4A     		ldr	r2, .L48+12
 626 037a 5278     		ldrb	r2, [r2, #1]	@ zero_extendqisi2
 627 037c DBB2     		uxtb	r3, r3
 628 037e 9342     		cmp	r3, r2
 629 0380 05D1     		bne	.L39
 909:.\Generated_Source\PSoC5/RTC_1_INT.c ****             {
 910:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 RTC_1_alarmCurStatus |= RTC_1_ALARM_MIN_MASK;
 630              		.loc 1 910 0
 631 0382 2A4A     		ldr	r2, .L48
 632 0384 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 633 0386 43F00203 		orr	r3, r3, #2
 634 038a 1370     		strb	r3, [r2]
 635 038c 04E0     		b	.L38
 636              	.L39:
 911:.\Generated_Source\PSoC5/RTC_1_INT.c ****             }
 912:.\Generated_Source\PSoC5/RTC_1_INT.c ****             else
 913:.\Generated_Source\PSoC5/RTC_1_INT.c ****             {
 914:.\Generated_Source\PSoC5/RTC_1_INT.c ****                 RTC_1_alarmCurStatus &= (uint8)(~RTC_1_ALARM_MIN_MASK);
 637              		.loc 1 914 0
 638 038e 274A     		ldr	r2, .L48
 639 0390 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 640 0392 03F0FD03 		and	r3, r3, #253
 641 0396 1370     		strb	r3, [r2]
 642              	.L38:
 915:.\Generated_Source\PSoC5/RTC_1_INT.c ****             }
 916:.\Generated_Source\PSoC5/RTC_1_INT.c ****         }
 917:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 918:.\Generated_Source\PSoC5/RTC_1_INT.c ****         /* Set Alarm flag event */
 919:.\Generated_Source\PSoC5/RTC_1_INT.c ****         RTC_1_tmp = RTC_1_alarmCfgMask;
 643              		.loc 1 919 0
 644 0398 254B     		ldr	r3, .L48+4
 645 039a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 646              	.LVL13:
 920:.\Generated_Source\PSoC5/RTC_1_INT.c ****         RTC_1_SET_ALARM(RTC_1_tmp,
 647              		.loc 1 920 0
 648 039c 03F0FF02 		and	r2, r3, #255
 649 03a0 63B1     		cbz	r3, .L40
 650              		.loc 1 920 0 is_stmt 0 discriminator 1
 651 03a2 224B     		ldr	r3, .L48
 652              	.LVL14:
 653 03a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 654 03a6 1340     		ands	r3, r3, r2
 655 03a8 9342     		cmp	r3, r2
 656 03aa 07D1     		bne	.L40
 657              		.loc 1 920 0 discriminator 2
 658 03ac 234A     		ldr	r2, .L48+16
 659 03ae 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 660 03b0 43F00803 		orr	r3, r3, #8
 661 03b4 1370     		strb	r3, [r2]
 662 03b6 0022     		movs	r2, #0
 663 03b8 1C4B     		ldr	r3, .L48
 664 03ba 1A70     		strb	r2, [r3]
 665              	.L40:
ARM GAS  C:\Users\nosak\AppData\Local\Temp\cc03czBb.s 			page 29


 921:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                    RTC_1_alarmCurStatus,
 922:.\Generated_Source\PSoC5/RTC_1_INT.c ****                                    RTC_1_statusDateTime);
 923:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 924:.\Generated_Source\PSoC5/RTC_1_INT.c ****         /* Every Min */
 925:.\Generated_Source\PSoC5/RTC_1_INT.c ****         if(0u != RTC_1_IS_BIT_SET(RTC_1_intervalCfgMask, RTC_1_INTERVAL_MIN_MASK))
 666              		.loc 1 925 0 is_stmt 1
 667 03bc 204B     		ldr	r3, .L48+20
 668 03be 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 669 03c0 13F0020F 		tst	r3, #2
 670 03c4 01D0     		beq	.L8
 926:.\Generated_Source\PSoC5/RTC_1_INT.c ****         {
 927:.\Generated_Source\PSoC5/RTC_1_INT.c ****             RTC_1_EveryMinuteHandler();
 671              		.loc 1 927 0
 672 03c6 FFF7FEFF 		bl	RTC_1_EveryMinuteHandler
 673              	.LVL15:
 674              	.L8:
 928:.\Generated_Source\PSoC5/RTC_1_INT.c ****         }
 929:.\Generated_Source\PSoC5/RTC_1_INT.c ****     } /* Sec */
 930:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 931:.\Generated_Source\PSoC5/RTC_1_INT.c ****     /* Alarm SEC */
 932:.\Generated_Source\PSoC5/RTC_1_INT.c ****     if(0u != RTC_1_IS_BIT_SET(RTC_1_alarmCfgMask, RTC_1_ALARM_SEC_MASK))
 675              		.loc 1 932 0
 676 03ca 194B     		ldr	r3, .L48+4
 677 03cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 678 03ce 13F0010F 		tst	r3, #1
 679 03d2 11D0     		beq	.L41
 933:.\Generated_Source\PSoC5/RTC_1_INT.c ****     {
 934:.\Generated_Source\PSoC5/RTC_1_INT.c ****         if(RTC_1_alarmCfgTimeDate.Sec == RTC_1_currentTimeDate.Sec)
 680              		.loc 1 934 0
 681 03d4 174B     		ldr	r3, .L48+8
 682 03d6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 683 03d8 174A     		ldr	r2, .L48+12
 684 03da 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 685 03dc DBB2     		uxtb	r3, r3
 686 03de 9342     		cmp	r3, r2
 687 03e0 05D1     		bne	.L42
 935:.\Generated_Source\PSoC5/RTC_1_INT.c ****         {
 936:.\Generated_Source\PSoC5/RTC_1_INT.c ****             RTC_1_alarmCurStatus |= RTC_1_ALARM_SEC_MASK;
 688              		.loc 1 936 0
 689 03e2 124A     		ldr	r2, .L48
 690 03e4 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 691 03e6 43F00103 		orr	r3, r3, #1
 692 03ea 1370     		strb	r3, [r2]
 693 03ec 04E0     		b	.L41
 694              	.L42:
 937:.\Generated_Source\PSoC5/RTC_1_INT.c ****         }
 938:.\Generated_Source\PSoC5/RTC_1_INT.c ****         else
 939:.\Generated_Source\PSoC5/RTC_1_INT.c ****         {
 940:.\Generated_Source\PSoC5/RTC_1_INT.c ****             RTC_1_alarmCurStatus &= (uint8)(~RTC_1_ALARM_SEC_MASK);
 695              		.loc 1 940 0
 696 03ee 0F4A     		ldr	r2, .L48
 697 03f0 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 698 03f2 03F0FE03 		and	r3, r3, #254
 699 03f6 1370     		strb	r3, [r2]
 700              	.L41:
 941:.\Generated_Source\PSoC5/RTC_1_INT.c ****         }
 942:.\Generated_Source\PSoC5/RTC_1_INT.c ****     }
ARM GAS  C:\Users\nosak\AppData\Local\Temp\cc03czBb.s 			page 30


 943:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 944:.\Generated_Source\PSoC5/RTC_1_INT.c ****     /* Set Alarm flag event */
 945:.\Generated_Source\PSoC5/RTC_1_INT.c ****     RTC_1_tmp = RTC_1_alarmCfgMask;
 701              		.loc 1 945 0
 702 03f8 0D4B     		ldr	r3, .L48+4
 703 03fa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 704              	.LVL16:
 946:.\Generated_Source\PSoC5/RTC_1_INT.c ****     RTC_1_SET_ALARM(RTC_1_tmp, RTC_1_alarmCurStatus, RTC_1_statusDateTime);
 705              		.loc 1 946 0
 706 03fc 03F0FF02 		and	r2, r3, #255
 707 0400 63B1     		cbz	r3, .L43
 708              		.loc 1 946 0 is_stmt 0 discriminator 1
 709 0402 0A4B     		ldr	r3, .L48
 710              	.LVL17:
 711 0404 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 712 0406 1340     		ands	r3, r3, r2
 713 0408 9342     		cmp	r3, r2
 714 040a 07D1     		bne	.L43
 715              		.loc 1 946 0 discriminator 2
 716 040c 0B4A     		ldr	r2, .L48+16
 717 040e 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 718 0410 43F00803 		orr	r3, r3, #8
 719 0414 1370     		strb	r3, [r2]
 720 0416 0022     		movs	r2, #0
 721 0418 044B     		ldr	r3, .L48
 722 041a 1A70     		strb	r2, [r3]
 723              	.L43:
 947:.\Generated_Source\PSoC5/RTC_1_INT.c **** 
 948:.\Generated_Source\PSoC5/RTC_1_INT.c ****     /* Execute every second handler if needed */
 949:.\Generated_Source\PSoC5/RTC_1_INT.c ****     if(0u != RTC_1_IS_BIT_SET(RTC_1_intervalCfgMask, RTC_1_INTERVAL_SEC_MASK))
 724              		.loc 1 949 0 is_stmt 1
 725 041c 084B     		ldr	r3, .L48+20
 726 041e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 727 0420 13F0010F 		tst	r3, #1
 728 0424 01D0     		beq	.L7
 950:.\Generated_Source\PSoC5/RTC_1_INT.c ****     {
 951:.\Generated_Source\PSoC5/RTC_1_INT.c ****         RTC_1_EverySecondHandler();
 729              		.loc 1 951 0
 730 0426 FFF7FEFF 		bl	RTC_1_EverySecondHandler
 731              	.LVL18:
 732              	.L7:
 733 042a 08BD     		pop	{r3, pc}
 734              	.L49:
 735              		.align	2
 736              	.L48:
 737 042c 00000000 		.word	RTC_1_alarmCurStatus
 738 0430 00000000 		.word	RTC_1_alarmCfgMask
 739 0434 00000000 		.word	RTC_1_alarmCfgTimeDate
 740 0438 00000000 		.word	RTC_1_currentTimeDate
 741 043c 00000000 		.word	RTC_1_statusDateTime
 742 0440 00000000 		.word	RTC_1_intervalCfgMask
 743              		.cfi_endproc
 744              	.LFE7:
 745              		.size	RTC_1_ISR, .-RTC_1_ISR
 746              		.text
 747              	.Letext0:
 748              		.file 2 ".\\Generated_Source\\PSoC5\\cytypes.h"
ARM GAS  C:\Users\nosak\AppData\Local\Temp\cc03czBb.s 			page 31


 749              		.file 3 ".\\Generated_Source\\PSoC5\\RTC_1.h"
 750              		.file 4 ".\\Generated_Source\\PSoC5\\cyPm.h"
 751              		.section	.debug_info,"",%progbits
 752              	.Ldebug_info0:
 753 0000 5B020000 		.4byte	0x25b
 754 0004 0400     		.2byte	0x4
 755 0006 00000000 		.4byte	.Ldebug_abbrev0
 756 000a 04       		.byte	0x4
 757 000b 01       		.uleb128 0x1
 758 000c 89010000 		.4byte	.LASF35
 759 0010 01       		.byte	0x1
 760 0011 0B000000 		.4byte	.LASF36
 761 0015 30000000 		.4byte	.LASF37
 762 0019 00000000 		.4byte	.Ldebug_ranges0+0
 763 001d 00000000 		.4byte	0
 764 0021 00000000 		.4byte	.Ldebug_line0
 765 0025 02       		.uleb128 0x2
 766 0026 01       		.byte	0x1
 767 0027 06       		.byte	0x6
 768 0028 D6020000 		.4byte	.LASF0
 769 002c 02       		.uleb128 0x2
 770 002d 01       		.byte	0x1
 771 002e 08       		.byte	0x8
 772 002f ED000000 		.4byte	.LASF1
 773 0033 02       		.uleb128 0x2
 774 0034 02       		.byte	0x2
 775 0035 05       		.byte	0x5
 776 0036 9F020000 		.4byte	.LASF2
 777 003a 02       		.uleb128 0x2
 778 003b 02       		.byte	0x2
 779 003c 07       		.byte	0x7
 780 003d A2000000 		.4byte	.LASF3
 781 0041 02       		.uleb128 0x2
 782 0042 04       		.byte	0x4
 783 0043 05       		.byte	0x5
 784 0044 BD020000 		.4byte	.LASF4
 785 0048 02       		.uleb128 0x2
 786 0049 04       		.byte	0x4
 787 004a 07       		.byte	0x7
 788 004b 16010000 		.4byte	.LASF5
 789 004f 02       		.uleb128 0x2
 790 0050 08       		.byte	0x8
 791 0051 05       		.byte	0x5
 792 0052 5B020000 		.4byte	.LASF6
 793 0056 02       		.uleb128 0x2
 794 0057 08       		.byte	0x8
 795 0058 07       		.byte	0x7
 796 0059 24020000 		.4byte	.LASF7
 797 005d 03       		.uleb128 0x3
 798 005e 04       		.byte	0x4
 799 005f 05       		.byte	0x5
 800 0060 696E7400 		.ascii	"int\000"
 801 0064 02       		.uleb128 0x2
 802 0065 04       		.byte	0x4
 803 0066 07       		.byte	0x7
 804 0067 17020000 		.4byte	.LASF8
 805 006b 04       		.uleb128 0x4
ARM GAS  C:\Users\nosak\AppData\Local\Temp\cc03czBb.s 			page 32


 806 006c 3D010000 		.4byte	.LASF9
 807 0070 02       		.byte	0x2
 808 0071 9201     		.2byte	0x192
 809 0073 2C000000 		.4byte	0x2c
 810 0077 04       		.uleb128 0x4
 811 0078 82010000 		.4byte	.LASF10
 812 007c 02       		.byte	0x2
 813 007d 9301     		.2byte	0x193
 814 007f 3A000000 		.4byte	0x3a
 815 0083 02       		.uleb128 0x2
 816 0084 04       		.byte	0x4
 817 0085 04       		.byte	0x4
 818 0086 C8000000 		.4byte	.LASF11
 819 008a 02       		.uleb128 0x2
 820 008b 08       		.byte	0x8
 821 008c 04       		.byte	0x4
 822 008d 71010000 		.4byte	.LASF12
 823 0091 02       		.uleb128 0x2
 824 0092 01       		.byte	0x1
 825 0093 08       		.byte	0x8
 826 0094 84020000 		.4byte	.LASF13
 827 0098 05       		.uleb128 0x5
 828 0099 6B000000 		.4byte	0x6b
 829 009d 06       		.uleb128 0x6
 830 009e 0C       		.byte	0xc
 831 009f 03       		.byte	0x3
 832 00a0 30       		.byte	0x30
 833 00a1 06010000 		.4byte	0x106
 834 00a5 07       		.uleb128 0x7
 835 00a6 53656300 		.ascii	"Sec\000"
 836 00aa 03       		.byte	0x3
 837 00ab 32       		.byte	0x32
 838 00ac 6B000000 		.4byte	0x6b
 839 00b0 00       		.byte	0
 840 00b1 07       		.uleb128 0x7
 841 00b2 4D696E00 		.ascii	"Min\000"
 842 00b6 03       		.byte	0x3
 843 00b7 33       		.byte	0x33
 844 00b8 6B000000 		.4byte	0x6b
 845 00bc 01       		.byte	0x1
 846 00bd 08       		.uleb128 0x8
 847 00be A9020000 		.4byte	.LASF14
 848 00c2 03       		.byte	0x3
 849 00c3 34       		.byte	0x34
 850 00c4 6B000000 		.4byte	0x6b
 851 00c8 02       		.byte	0x2
 852 00c9 08       		.uleb128 0x8
 853 00ca 12030000 		.4byte	.LASF15
 854 00ce 03       		.byte	0x3
 855 00cf 35       		.byte	0x35
 856 00d0 6B000000 		.4byte	0x6b
 857 00d4 03       		.byte	0x3
 858 00d5 08       		.uleb128 0x8
 859 00d6 00000000 		.4byte	.LASF16
 860 00da 03       		.byte	0x3
 861 00db 36       		.byte	0x36
 862 00dc 6B000000 		.4byte	0x6b
ARM GAS  C:\Users\nosak\AppData\Local\Temp\cc03czBb.s 			page 33


 863 00e0 04       		.byte	0x4
 864 00e1 08       		.uleb128 0x8
 865 00e2 78010000 		.4byte	.LASF17
 866 00e6 03       		.byte	0x3
 867 00e7 37       		.byte	0x37
 868 00e8 77000000 		.4byte	0x77
 869 00ec 06       		.byte	0x6
 870 00ed 08       		.uleb128 0x8
 871 00ee 5C010000 		.4byte	.LASF18
 872 00f2 03       		.byte	0x3
 873 00f3 38       		.byte	0x38
 874 00f4 6B000000 		.4byte	0x6b
 875 00f8 08       		.byte	0x8
 876 00f9 08       		.uleb128 0x8
 877 00fa 62010000 		.4byte	.LASF19
 878 00fe 03       		.byte	0x3
 879 00ff 39       		.byte	0x39
 880 0100 77000000 		.4byte	0x77
 881 0104 0A       		.byte	0xa
 882 0105 00       		.byte	0
 883 0106 09       		.uleb128 0x9
 884 0107 C6020000 		.4byte	.LASF20
 885 010b 03       		.byte	0x3
 886 010c 3A       		.byte	0x3a
 887 010d 11010000 		.4byte	0x111
 888 0111 05       		.uleb128 0x5
 889 0112 9D000000 		.4byte	0x9d
 890 0116 02       		.uleb128 0x2
 891 0117 04       		.byte	0x4
 892 0118 07       		.byte	0x7
 893 0119 3B020000 		.4byte	.LASF21
 894 011d 0A       		.uleb128 0xa
 895 011e FB020000 		.4byte	.LASF22
 896 0122 01       		.byte	0x1
 897 0123 6D       		.byte	0x6d
 898 0124 00000000 		.4byte	.LFB2
 899 0128 08000000 		.4byte	.LFE2-.LFB2
 900 012c 01       		.uleb128 0x1
 901 012d 9C       		.byte	0x9c
 902 012e 3C010000 		.4byte	0x13c
 903 0132 0B       		.uleb128 0xb
 904 0133 06000000 		.4byte	.LVL0
 905 0137 38020000 		.4byte	0x238
 906 013b 00       		.byte	0
 907 013c 0A       		.uleb128 0xa
 908 013d 89000000 		.4byte	.LASF23
 909 0141 01       		.byte	0x1
 910 0142 52       		.byte	0x52
 911 0143 00000000 		.4byte	.LFB1
 912 0147 08000000 		.4byte	.LFE1-.LFB1
 913 014b 01       		.uleb128 0x1
 914 014c 9C       		.byte	0x9c
 915 014d 5B010000 		.4byte	0x15b
 916 0151 0B       		.uleb128 0xb
 917 0152 06000000 		.4byte	.LVL1
 918 0156 3F020000 		.4byte	0x23f
 919 015a 00       		.byte	0
ARM GAS  C:\Users\nosak\AppData\Local\Temp\cc03czBb.s 			page 34


 920 015b 0A       		.uleb128 0xa
 921 015c 43010000 		.4byte	.LASF24
 922 0160 01       		.byte	0x1
 923 0161 37       		.byte	0x37
 924 0162 00000000 		.4byte	.LFB0
 925 0166 08000000 		.4byte	.LFE0-.LFB0
 926 016a 01       		.uleb128 0x1
 927 016b 9C       		.byte	0x9c
 928 016c 7A010000 		.4byte	0x17a
 929 0170 0B       		.uleb128 0xb
 930 0171 06000000 		.4byte	.LVL2
 931 0175 46020000 		.4byte	0x246
 932 0179 00       		.byte	0
 933 017a 0C       		.uleb128 0xc
 934 017b CE000000 		.4byte	.LASF38
 935 017f 01       		.byte	0x1
 936 0180 0C01     		.2byte	0x10c
 937 0182 00000000 		.4byte	.LFB7
 938 0186 44040000 		.4byte	.LFE7-.LFB7
 939 018a 01       		.uleb128 0x1
 940 018b 9C       		.byte	0x9c
 941 018c CF010000 		.4byte	0x1cf
 942 0190 0D       		.uleb128 0xd
 943 0191 67010000 		.4byte	.LASF39
 944 0195 01       		.byte	0x1
 945 0196 0E01     		.2byte	0x10e
 946 0198 6B000000 		.4byte	0x6b
 947 019c 00000000 		.4byte	.LLST0
 948 01a0 0E       		.uleb128 0xe
 949 01a1 08000000 		.4byte	.LVL3
 950 01a5 4D020000 		.4byte	0x24d
 951 01a9 B3010000 		.4byte	0x1b3
 952 01ad 0F       		.uleb128 0xf
 953 01ae 01       		.uleb128 0x1
 954 01af 50       		.byte	0x50
 955 01b0 01       		.uleb128 0x1
 956 01b1 34       		.byte	0x34
 957 01b2 00       		.byte	0
 958 01b3 0B       		.uleb128 0xb
 959 01b4 6A030000 		.4byte	.LVL12
 960 01b8 1D010000 		.4byte	0x11d
 961 01bc 0B       		.uleb128 0xb
 962 01bd CA030000 		.4byte	.LVL15
 963 01c1 3C010000 		.4byte	0x13c
 964 01c5 0B       		.uleb128 0xb
 965 01c6 2A040000 		.4byte	.LVL18
 966 01ca 5B010000 		.4byte	0x15b
 967 01ce 00       		.byte	0
 968 01cf 10       		.uleb128 0x10
 969 01d0 44020000 		.4byte	.LASF25
 970 01d4 03       		.byte	0x3
 971 01d5 2D01     		.2byte	0x12d
 972 01d7 06010000 		.4byte	0x106
 973 01db 10       		.uleb128 0x10
 974 01dc 89020000 		.4byte	.LASF26
 975 01e0 03       		.byte	0x3
 976 01e1 2E01     		.2byte	0x12e
ARM GAS  C:\Users\nosak\AppData\Local\Temp\cc03czBb.s 			page 35


 977 01e3 06010000 		.4byte	0x106
 978 01e7 10       		.uleb128 0x10
 979 01e8 1C030000 		.4byte	.LASF27
 980 01ec 03       		.byte	0x3
 981 01ed 3901     		.2byte	0x139
 982 01ef 98000000 		.4byte	0x98
 983 01f3 10       		.uleb128 0x10
 984 01f4 D8000000 		.4byte	.LASF28
 985 01f8 03       		.byte	0x3
 986 01f9 3A01     		.2byte	0x13a
 987 01fb 98000000 		.4byte	0x98
 988 01ff 10       		.uleb128 0x10
 989 0200 73000000 		.4byte	.LASF29
 990 0204 03       		.byte	0x3
 991 0205 3B01     		.2byte	0x13b
 992 0207 98000000 		.4byte	0x98
 993 020b 10       		.uleb128 0x10
 994 020c 28010000 		.4byte	.LASF30
 995 0210 03       		.byte	0x3
 996 0211 3C01     		.2byte	0x13c
 997 0213 98000000 		.4byte	0x98
 998 0217 11       		.uleb128 0x11
 999 0218 6B000000 		.4byte	0x6b
 1000 021c 27020000 		.4byte	0x227
 1001 0220 12       		.uleb128 0x12
 1002 0221 16010000 		.4byte	0x116
 1003 0225 0B       		.byte	0xb
 1004 0226 00       		.byte	0
 1005 0227 10       		.uleb128 0x10
 1006 0228 B5000000 		.4byte	.LASF31
 1007 022c 03       		.byte	0x3
 1008 022d 3E01     		.2byte	0x13e
 1009 022f 33020000 		.4byte	0x233
 1010 0233 13       		.uleb128 0x13
 1011 0234 17020000 		.4byte	0x217
 1012 0238 14       		.uleb128 0x14
 1013 0239 E2020000 		.4byte	.LASF32
 1014 023d 01       		.byte	0x1
 1015 023e 24       		.byte	0x24
 1016 023f 14       		.uleb128 0x14
 1017 0240 FB000000 		.4byte	.LASF33
 1018 0244 01       		.byte	0x1
 1019 0245 23       		.byte	0x23
 1020 0246 14       		.uleb128 0x14
 1021 0247 69020000 		.4byte	.LASF34
 1022 024b 01       		.byte	0x1
 1023 024c 22       		.byte	0x22
 1024 024d 15       		.uleb128 0x15
 1025 024e AE020000 		.4byte	.LASF40
 1026 0252 04       		.byte	0x4
 1027 0253 26       		.byte	0x26
 1028 0254 6B000000 		.4byte	0x6b
 1029 0258 16       		.uleb128 0x16
 1030 0259 6B000000 		.4byte	0x6b
 1031 025d 00       		.byte	0
 1032 025e 00       		.byte	0
 1033              		.section	.debug_abbrev,"",%progbits
ARM GAS  C:\Users\nosak\AppData\Local\Temp\cc03czBb.s 			page 36


 1034              	.Ldebug_abbrev0:
 1035 0000 01       		.uleb128 0x1
 1036 0001 11       		.uleb128 0x11
 1037 0002 01       		.byte	0x1
 1038 0003 25       		.uleb128 0x25
 1039 0004 0E       		.uleb128 0xe
 1040 0005 13       		.uleb128 0x13
 1041 0006 0B       		.uleb128 0xb
 1042 0007 03       		.uleb128 0x3
 1043 0008 0E       		.uleb128 0xe
 1044 0009 1B       		.uleb128 0x1b
 1045 000a 0E       		.uleb128 0xe
 1046 000b 55       		.uleb128 0x55
 1047 000c 17       		.uleb128 0x17
 1048 000d 11       		.uleb128 0x11
 1049 000e 01       		.uleb128 0x1
 1050 000f 10       		.uleb128 0x10
 1051 0010 17       		.uleb128 0x17
 1052 0011 00       		.byte	0
 1053 0012 00       		.byte	0
 1054 0013 02       		.uleb128 0x2
 1055 0014 24       		.uleb128 0x24
 1056 0015 00       		.byte	0
 1057 0016 0B       		.uleb128 0xb
 1058 0017 0B       		.uleb128 0xb
 1059 0018 3E       		.uleb128 0x3e
 1060 0019 0B       		.uleb128 0xb
 1061 001a 03       		.uleb128 0x3
 1062 001b 0E       		.uleb128 0xe
 1063 001c 00       		.byte	0
 1064 001d 00       		.byte	0
 1065 001e 03       		.uleb128 0x3
 1066 001f 24       		.uleb128 0x24
 1067 0020 00       		.byte	0
 1068 0021 0B       		.uleb128 0xb
 1069 0022 0B       		.uleb128 0xb
 1070 0023 3E       		.uleb128 0x3e
 1071 0024 0B       		.uleb128 0xb
 1072 0025 03       		.uleb128 0x3
 1073 0026 08       		.uleb128 0x8
 1074 0027 00       		.byte	0
 1075 0028 00       		.byte	0
 1076 0029 04       		.uleb128 0x4
 1077 002a 16       		.uleb128 0x16
 1078 002b 00       		.byte	0
 1079 002c 03       		.uleb128 0x3
 1080 002d 0E       		.uleb128 0xe
 1081 002e 3A       		.uleb128 0x3a
 1082 002f 0B       		.uleb128 0xb
 1083 0030 3B       		.uleb128 0x3b
 1084 0031 05       		.uleb128 0x5
 1085 0032 49       		.uleb128 0x49
 1086 0033 13       		.uleb128 0x13
 1087 0034 00       		.byte	0
 1088 0035 00       		.byte	0
 1089 0036 05       		.uleb128 0x5
 1090 0037 35       		.uleb128 0x35
ARM GAS  C:\Users\nosak\AppData\Local\Temp\cc03czBb.s 			page 37


 1091 0038 00       		.byte	0
 1092 0039 49       		.uleb128 0x49
 1093 003a 13       		.uleb128 0x13
 1094 003b 00       		.byte	0
 1095 003c 00       		.byte	0
 1096 003d 06       		.uleb128 0x6
 1097 003e 13       		.uleb128 0x13
 1098 003f 01       		.byte	0x1
 1099 0040 0B       		.uleb128 0xb
 1100 0041 0B       		.uleb128 0xb
 1101 0042 3A       		.uleb128 0x3a
 1102 0043 0B       		.uleb128 0xb
 1103 0044 3B       		.uleb128 0x3b
 1104 0045 0B       		.uleb128 0xb
 1105 0046 01       		.uleb128 0x1
 1106 0047 13       		.uleb128 0x13
 1107 0048 00       		.byte	0
 1108 0049 00       		.byte	0
 1109 004a 07       		.uleb128 0x7
 1110 004b 0D       		.uleb128 0xd
 1111 004c 00       		.byte	0
 1112 004d 03       		.uleb128 0x3
 1113 004e 08       		.uleb128 0x8
 1114 004f 3A       		.uleb128 0x3a
 1115 0050 0B       		.uleb128 0xb
 1116 0051 3B       		.uleb128 0x3b
 1117 0052 0B       		.uleb128 0xb
 1118 0053 49       		.uleb128 0x49
 1119 0054 13       		.uleb128 0x13
 1120 0055 38       		.uleb128 0x38
 1121 0056 0B       		.uleb128 0xb
 1122 0057 00       		.byte	0
 1123 0058 00       		.byte	0
 1124 0059 08       		.uleb128 0x8
 1125 005a 0D       		.uleb128 0xd
 1126 005b 00       		.byte	0
 1127 005c 03       		.uleb128 0x3
 1128 005d 0E       		.uleb128 0xe
 1129 005e 3A       		.uleb128 0x3a
 1130 005f 0B       		.uleb128 0xb
 1131 0060 3B       		.uleb128 0x3b
 1132 0061 0B       		.uleb128 0xb
 1133 0062 49       		.uleb128 0x49
 1134 0063 13       		.uleb128 0x13
 1135 0064 38       		.uleb128 0x38
 1136 0065 0B       		.uleb128 0xb
 1137 0066 00       		.byte	0
 1138 0067 00       		.byte	0
 1139 0068 09       		.uleb128 0x9
 1140 0069 16       		.uleb128 0x16
 1141 006a 00       		.byte	0
 1142 006b 03       		.uleb128 0x3
 1143 006c 0E       		.uleb128 0xe
 1144 006d 3A       		.uleb128 0x3a
 1145 006e 0B       		.uleb128 0xb
 1146 006f 3B       		.uleb128 0x3b
 1147 0070 0B       		.uleb128 0xb
ARM GAS  C:\Users\nosak\AppData\Local\Temp\cc03czBb.s 			page 38


 1148 0071 49       		.uleb128 0x49
 1149 0072 13       		.uleb128 0x13
 1150 0073 00       		.byte	0
 1151 0074 00       		.byte	0
 1152 0075 0A       		.uleb128 0xa
 1153 0076 2E       		.uleb128 0x2e
 1154 0077 01       		.byte	0x1
 1155 0078 03       		.uleb128 0x3
 1156 0079 0E       		.uleb128 0xe
 1157 007a 3A       		.uleb128 0x3a
 1158 007b 0B       		.uleb128 0xb
 1159 007c 3B       		.uleb128 0x3b
 1160 007d 0B       		.uleb128 0xb
 1161 007e 27       		.uleb128 0x27
 1162 007f 19       		.uleb128 0x19
 1163 0080 11       		.uleb128 0x11
 1164 0081 01       		.uleb128 0x1
 1165 0082 12       		.uleb128 0x12
 1166 0083 06       		.uleb128 0x6
 1167 0084 40       		.uleb128 0x40
 1168 0085 18       		.uleb128 0x18
 1169 0086 9742     		.uleb128 0x2117
 1170 0088 19       		.uleb128 0x19
 1171 0089 01       		.uleb128 0x1
 1172 008a 13       		.uleb128 0x13
 1173 008b 00       		.byte	0
 1174 008c 00       		.byte	0
 1175 008d 0B       		.uleb128 0xb
 1176 008e 898201   		.uleb128 0x4109
 1177 0091 00       		.byte	0
 1178 0092 11       		.uleb128 0x11
 1179 0093 01       		.uleb128 0x1
 1180 0094 31       		.uleb128 0x31
 1181 0095 13       		.uleb128 0x13
 1182 0096 00       		.byte	0
 1183 0097 00       		.byte	0
 1184 0098 0C       		.uleb128 0xc
 1185 0099 2E       		.uleb128 0x2e
 1186 009a 01       		.byte	0x1
 1187 009b 3F       		.uleb128 0x3f
 1188 009c 19       		.uleb128 0x19
 1189 009d 03       		.uleb128 0x3
 1190 009e 0E       		.uleb128 0xe
 1191 009f 3A       		.uleb128 0x3a
 1192 00a0 0B       		.uleb128 0xb
 1193 00a1 3B       		.uleb128 0x3b
 1194 00a2 05       		.uleb128 0x5
 1195 00a3 27       		.uleb128 0x27
 1196 00a4 19       		.uleb128 0x19
 1197 00a5 11       		.uleb128 0x11
 1198 00a6 01       		.uleb128 0x1
 1199 00a7 12       		.uleb128 0x12
 1200 00a8 06       		.uleb128 0x6
 1201 00a9 40       		.uleb128 0x40
 1202 00aa 18       		.uleb128 0x18
 1203 00ab 9742     		.uleb128 0x2117
 1204 00ad 19       		.uleb128 0x19
ARM GAS  C:\Users\nosak\AppData\Local\Temp\cc03czBb.s 			page 39


 1205 00ae 01       		.uleb128 0x1
 1206 00af 13       		.uleb128 0x13
 1207 00b0 00       		.byte	0
 1208 00b1 00       		.byte	0
 1209 00b2 0D       		.uleb128 0xd
 1210 00b3 34       		.uleb128 0x34
 1211 00b4 00       		.byte	0
 1212 00b5 03       		.uleb128 0x3
 1213 00b6 0E       		.uleb128 0xe
 1214 00b7 3A       		.uleb128 0x3a
 1215 00b8 0B       		.uleb128 0xb
 1216 00b9 3B       		.uleb128 0x3b
 1217 00ba 05       		.uleb128 0x5
 1218 00bb 49       		.uleb128 0x49
 1219 00bc 13       		.uleb128 0x13
 1220 00bd 02       		.uleb128 0x2
 1221 00be 17       		.uleb128 0x17
 1222 00bf 00       		.byte	0
 1223 00c0 00       		.byte	0
 1224 00c1 0E       		.uleb128 0xe
 1225 00c2 898201   		.uleb128 0x4109
 1226 00c5 01       		.byte	0x1
 1227 00c6 11       		.uleb128 0x11
 1228 00c7 01       		.uleb128 0x1
 1229 00c8 31       		.uleb128 0x31
 1230 00c9 13       		.uleb128 0x13
 1231 00ca 01       		.uleb128 0x1
 1232 00cb 13       		.uleb128 0x13
 1233 00cc 00       		.byte	0
 1234 00cd 00       		.byte	0
 1235 00ce 0F       		.uleb128 0xf
 1236 00cf 8A8201   		.uleb128 0x410a
 1237 00d2 00       		.byte	0
 1238 00d3 02       		.uleb128 0x2
 1239 00d4 18       		.uleb128 0x18
 1240 00d5 9142     		.uleb128 0x2111
 1241 00d7 18       		.uleb128 0x18
 1242 00d8 00       		.byte	0
 1243 00d9 00       		.byte	0
 1244 00da 10       		.uleb128 0x10
 1245 00db 34       		.uleb128 0x34
 1246 00dc 00       		.byte	0
 1247 00dd 03       		.uleb128 0x3
 1248 00de 0E       		.uleb128 0xe
 1249 00df 3A       		.uleb128 0x3a
 1250 00e0 0B       		.uleb128 0xb
 1251 00e1 3B       		.uleb128 0x3b
 1252 00e2 05       		.uleb128 0x5
 1253 00e3 49       		.uleb128 0x49
 1254 00e4 13       		.uleb128 0x13
 1255 00e5 3F       		.uleb128 0x3f
 1256 00e6 19       		.uleb128 0x19
 1257 00e7 3C       		.uleb128 0x3c
 1258 00e8 19       		.uleb128 0x19
 1259 00e9 00       		.byte	0
 1260 00ea 00       		.byte	0
 1261 00eb 11       		.uleb128 0x11
ARM GAS  C:\Users\nosak\AppData\Local\Temp\cc03czBb.s 			page 40


 1262 00ec 01       		.uleb128 0x1
 1263 00ed 01       		.byte	0x1
 1264 00ee 49       		.uleb128 0x49
 1265 00ef 13       		.uleb128 0x13
 1266 00f0 01       		.uleb128 0x1
 1267 00f1 13       		.uleb128 0x13
 1268 00f2 00       		.byte	0
 1269 00f3 00       		.byte	0
 1270 00f4 12       		.uleb128 0x12
 1271 00f5 21       		.uleb128 0x21
 1272 00f6 00       		.byte	0
 1273 00f7 49       		.uleb128 0x49
 1274 00f8 13       		.uleb128 0x13
 1275 00f9 2F       		.uleb128 0x2f
 1276 00fa 0B       		.uleb128 0xb
 1277 00fb 00       		.byte	0
 1278 00fc 00       		.byte	0
 1279 00fd 13       		.uleb128 0x13
 1280 00fe 26       		.uleb128 0x26
 1281 00ff 00       		.byte	0
 1282 0100 49       		.uleb128 0x49
 1283 0101 13       		.uleb128 0x13
 1284 0102 00       		.byte	0
 1285 0103 00       		.byte	0
 1286 0104 14       		.uleb128 0x14
 1287 0105 2E       		.uleb128 0x2e
 1288 0106 00       		.byte	0
 1289 0107 3F       		.uleb128 0x3f
 1290 0108 19       		.uleb128 0x19
 1291 0109 03       		.uleb128 0x3
 1292 010a 0E       		.uleb128 0xe
 1293 010b 3A       		.uleb128 0x3a
 1294 010c 0B       		.uleb128 0xb
 1295 010d 3B       		.uleb128 0x3b
 1296 010e 0B       		.uleb128 0xb
 1297 010f 27       		.uleb128 0x27
 1298 0110 19       		.uleb128 0x19
 1299 0111 3C       		.uleb128 0x3c
 1300 0112 19       		.uleb128 0x19
 1301 0113 00       		.byte	0
 1302 0114 00       		.byte	0
 1303 0115 15       		.uleb128 0x15
 1304 0116 2E       		.uleb128 0x2e
 1305 0117 01       		.byte	0x1
 1306 0118 3F       		.uleb128 0x3f
 1307 0119 19       		.uleb128 0x19
 1308 011a 03       		.uleb128 0x3
 1309 011b 0E       		.uleb128 0xe
 1310 011c 3A       		.uleb128 0x3a
 1311 011d 0B       		.uleb128 0xb
 1312 011e 3B       		.uleb128 0x3b
 1313 011f 0B       		.uleb128 0xb
 1314 0120 27       		.uleb128 0x27
 1315 0121 19       		.uleb128 0x19
 1316 0122 49       		.uleb128 0x49
 1317 0123 13       		.uleb128 0x13
 1318 0124 3C       		.uleb128 0x3c
ARM GAS  C:\Users\nosak\AppData\Local\Temp\cc03czBb.s 			page 41


 1319 0125 19       		.uleb128 0x19
 1320 0126 00       		.byte	0
 1321 0127 00       		.byte	0
 1322 0128 16       		.uleb128 0x16
 1323 0129 05       		.uleb128 0x5
 1324 012a 00       		.byte	0
 1325 012b 49       		.uleb128 0x49
 1326 012c 13       		.uleb128 0x13
 1327 012d 00       		.byte	0
 1328 012e 00       		.byte	0
 1329 012f 00       		.byte	0
 1330              		.section	.debug_loc,"",%progbits
 1331              	.Ldebug_loc0:
 1332              	.LLST0:
 1333 0000 8C010000 		.4byte	.LVL4
 1334 0004 94010000 		.4byte	.LVL5
 1335 0008 0100     		.2byte	0x1
 1336 000a 53       		.byte	0x53
 1337 000b E2010000 		.4byte	.LVL6
 1338 000f EA010000 		.4byte	.LVL7
 1339 0013 0100     		.2byte	0x1
 1340 0015 53       		.byte	0x53
 1341 0016 B8020000 		.4byte	.LVL8
 1342 001a C0020000 		.4byte	.LVL9
 1343 001e 0100     		.2byte	0x1
 1344 0020 53       		.byte	0x53
 1345 0021 3C030000 		.4byte	.LVL10
 1346 0025 44030000 		.4byte	.LVL11
 1347 0029 0100     		.2byte	0x1
 1348 002b 53       		.byte	0x53
 1349 002c 9C030000 		.4byte	.LVL13
 1350 0030 A4030000 		.4byte	.LVL14
 1351 0034 0100     		.2byte	0x1
 1352 0036 53       		.byte	0x53
 1353 0037 FC030000 		.4byte	.LVL16
 1354 003b 04040000 		.4byte	.LVL17
 1355 003f 0100     		.2byte	0x1
 1356 0041 53       		.byte	0x53
 1357 0042 00000000 		.4byte	0
 1358 0046 00000000 		.4byte	0
 1359              		.section	.debug_aranges,"",%progbits
 1360 0000 34000000 		.4byte	0x34
 1361 0004 0200     		.2byte	0x2
 1362 0006 00000000 		.4byte	.Ldebug_info0
 1363 000a 04       		.byte	0x4
 1364 000b 00       		.byte	0
 1365 000c 0000     		.2byte	0
 1366 000e 0000     		.2byte	0
 1367 0010 00000000 		.4byte	.LFB2
 1368 0014 08000000 		.4byte	.LFE2-.LFB2
 1369 0018 00000000 		.4byte	.LFB1
 1370 001c 08000000 		.4byte	.LFE1-.LFB1
 1371 0020 00000000 		.4byte	.LFB0
 1372 0024 08000000 		.4byte	.LFE0-.LFB0
 1373 0028 00000000 		.4byte	.LFB7
 1374 002c 44040000 		.4byte	.LFE7-.LFB7
 1375 0030 00000000 		.4byte	0
ARM GAS  C:\Users\nosak\AppData\Local\Temp\cc03czBb.s 			page 42


 1376 0034 00000000 		.4byte	0
 1377              		.section	.debug_ranges,"",%progbits
 1378              	.Ldebug_ranges0:
 1379 0000 00000000 		.4byte	.LFB2
 1380 0004 08000000 		.4byte	.LFE2
 1381 0008 00000000 		.4byte	.LFB1
 1382 000c 08000000 		.4byte	.LFE1
 1383 0010 00000000 		.4byte	.LFB0
 1384 0014 08000000 		.4byte	.LFE0
 1385 0018 00000000 		.4byte	.LFB7
 1386 001c 44040000 		.4byte	.LFE7
 1387 0020 00000000 		.4byte	0
 1388 0024 00000000 		.4byte	0
 1389              		.section	.debug_line,"",%progbits
 1390              	.Ldebug_line0:
 1391 0000 71010000 		.section	.debug_str,"MS",%progbits,1
 1391      02005D00 
 1391      00000201 
 1391      FB0E0D00 
 1391      01010101 
 1392              	.LASF16:
 1393 0000 4461794F 		.ascii	"DayOfMonth\000"
 1393      664D6F6E 
 1393      746800
 1394              	.LASF36:
 1395 000b 2E5C4765 		.ascii	".\\Generated_Source\\PSoC5\\RTC_1_INT.c\000"
 1395      6E657261 
 1395      7465645F 
 1395      536F7572 
 1395      63655C50 
 1396              	.LASF37:
 1397 0030 433A5C54 		.ascii	"C:\\TIRI\\k3g2pmpm_20211223\\trobot_psoc_v6_73\\tro"
 1397      4952495C 
 1397      6B336732 
 1397      706D706D 
 1397      5F323032 
 1398 005f 626F7436 		.ascii	"bot6_cir2_2wd.cydsn\000"
 1398      5F636972 
 1398      325F3277 
 1398      642E6379 
 1398      64736E00 
 1399              	.LASF29:
 1400 0073 5254435F 		.ascii	"RTC_1_intervalCfgMask\000"
 1400      315F696E 
 1400      74657276 
 1400      616C4366 
 1400      674D6173 
 1401              	.LASF23:
 1402 0089 5254435F 		.ascii	"RTC_1_EveryMinuteHandler\000"
 1402      315F4576 
 1402      6572794D 
 1402      696E7574 
 1402      6548616E 
 1403              	.LASF3:
 1404 00a2 73686F72 		.ascii	"short unsigned int\000"
 1404      7420756E 
 1404      7369676E 
ARM GAS  C:\Users\nosak\AppData\Local\Temp\cc03czBb.s 			page 43


 1404      65642069 
 1404      6E7400
 1405              	.LASF31:
 1406 00b5 5254435F 		.ascii	"RTC_1_daysInMonths\000"
 1406      315F6461 
 1406      7973496E 
 1406      4D6F6E74 
 1406      687300
 1407              	.LASF11:
 1408 00c8 666C6F61 		.ascii	"float\000"
 1408      7400
 1409              	.LASF38:
 1410 00ce 5254435F 		.ascii	"RTC_1_ISR\000"
 1410      315F4953 
 1410      5200
 1411              	.LASF28:
 1412 00d8 5254435F 		.ascii	"RTC_1_alarmCurStatus\000"
 1412      315F616C 
 1412      61726D43 
 1412      75725374 
 1412      61747573 
 1413              	.LASF1:
 1414 00ed 756E7369 		.ascii	"unsigned char\000"
 1414      676E6564 
 1414      20636861 
 1414      7200
 1415              	.LASF33:
 1416 00fb 4D795254 		.ascii	"MyRTC_1_EveryMinuteHandler\000"
 1416      435F315F 
 1416      45766572 
 1416      794D696E 
 1416      75746548 
 1417              	.LASF5:
 1418 0116 6C6F6E67 		.ascii	"long unsigned int\000"
 1418      20756E73 
 1418      69676E65 
 1418      6420696E 
 1418      7400
 1419              	.LASF30:
 1420 0128 5254435F 		.ascii	"RTC_1_statusDateTime\000"
 1420      315F7374 
 1420      61747573 
 1420      44617465 
 1420      54696D65 
 1421              	.LASF9:
 1422 013d 75696E74 		.ascii	"uint8\000"
 1422      3800
 1423              	.LASF24:
 1424 0143 5254435F 		.ascii	"RTC_1_EverySecondHandler\000"
 1424      315F4576 
 1424      65727953 
 1424      65636F6E 
 1424      6448616E 
 1425              	.LASF18:
 1426 015c 4D6F6E74 		.ascii	"Month\000"
 1426      6800
 1427              	.LASF19:
ARM GAS  C:\Users\nosak\AppData\Local\Temp\cc03czBb.s 			page 44


 1428 0162 59656172 		.ascii	"Year\000"
 1428      00
 1429              	.LASF39:
 1430 0167 5254435F 		.ascii	"RTC_1_tmp\000"
 1430      315F746D 
 1430      7000
 1431              	.LASF12:
 1432 0171 646F7562 		.ascii	"double\000"
 1432      6C6500
 1433              	.LASF17:
 1434 0178 4461794F 		.ascii	"DayOfYear\000"
 1434      66596561 
 1434      7200
 1435              	.LASF10:
 1436 0182 75696E74 		.ascii	"uint16\000"
 1436      313600
 1437              	.LASF35:
 1438 0189 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 1438      4320342E 
 1438      392E3320 
 1438      32303135 
 1438      30333033 
 1439 01bc 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 1439      20726576 
 1439      6973696F 
 1439      6E203232 
 1439      31323230 
 1440 01ef 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 1440      66756E63 
 1440      74696F6E 
 1440      2D736563 
 1440      74696F6E 
 1441              	.LASF8:
 1442 0217 756E7369 		.ascii	"unsigned int\000"
 1442      676E6564 
 1442      20696E74 
 1442      00
 1443              	.LASF7:
 1444 0224 6C6F6E67 		.ascii	"long long unsigned int\000"
 1444      206C6F6E 
 1444      6720756E 
 1444      7369676E 
 1444      65642069 
 1445              	.LASF21:
 1446 023b 73697A65 		.ascii	"sizetype\000"
 1446      74797065 
 1446      00
 1447              	.LASF25:
 1448 0244 5254435F 		.ascii	"RTC_1_alarmCfgTimeDate\000"
 1448      315F616C 
 1448      61726D43 
 1448      66675469 
 1448      6D654461 
 1449              	.LASF6:
 1450 025b 6C6F6E67 		.ascii	"long long int\000"
 1450      206C6F6E 
 1450      6720696E 
ARM GAS  C:\Users\nosak\AppData\Local\Temp\cc03czBb.s 			page 45


 1450      7400
 1451              	.LASF34:
 1452 0269 4D795254 		.ascii	"MyRTC_1_EverySecondHandler\000"
 1452      435F315F 
 1452      45766572 
 1452      79536563 
 1452      6F6E6448 
 1453              	.LASF13:
 1454 0284 63686172 		.ascii	"char\000"
 1454      00
 1455              	.LASF26:
 1456 0289 5254435F 		.ascii	"RTC_1_currentTimeDate\000"
 1456      315F6375 
 1456      7272656E 
 1456      7454696D 
 1456      65446174 
 1457              	.LASF2:
 1458 029f 73686F72 		.ascii	"short int\000"
 1458      7420696E 
 1458      7400
 1459              	.LASF14:
 1460 02a9 486F7572 		.ascii	"Hour\000"
 1460      00
 1461              	.LASF40:
 1462 02ae 4379506D 		.ascii	"CyPmReadStatus\000"
 1462      52656164 
 1462      53746174 
 1462      757300
 1463              	.LASF4:
 1464 02bd 6C6F6E67 		.ascii	"long int\000"
 1464      20696E74 
 1464      00
 1465              	.LASF20:
 1466 02c6 5254435F 		.ascii	"RTC_1_TIME_DATE\000"
 1466      315F5449 
 1466      4D455F44 
 1466      41544500 
 1467              	.LASF0:
 1468 02d6 7369676E 		.ascii	"signed char\000"
 1468      65642063 
 1468      68617200 
 1469              	.LASF32:
 1470 02e2 4D795254 		.ascii	"MyRTC_1_EveryHourHandler\000"
 1470      435F315F 
 1470      45766572 
 1470      79486F75 
 1470      7248616E 
 1471              	.LASF22:
 1472 02fb 5254435F 		.ascii	"RTC_1_EveryHourHandler\000"
 1472      315F4576 
 1472      65727948 
 1472      6F757248 
 1472      616E646C 
 1473              	.LASF15:
 1474 0312 4461794F 		.ascii	"DayOfWeek\000"
 1474      66576565 
 1474      6B00
ARM GAS  C:\Users\nosak\AppData\Local\Temp\cc03czBb.s 			page 46


 1475              	.LASF27:
 1476 031c 5254435F 		.ascii	"RTC_1_alarmCfgMask\000"
 1476      315F616C 
 1476      61726D43 
 1476      66674D61 
 1476      736B00
 1477              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
